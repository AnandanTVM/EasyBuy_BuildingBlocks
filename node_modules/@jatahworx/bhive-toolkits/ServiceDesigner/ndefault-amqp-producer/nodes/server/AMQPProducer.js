let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;

module.exports = class AMQPProducer extends BaseComponent {
	constructor(constructorOptions) {
		super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_AMQPProducer", "AMQPProducer");
		this.viewType = 'server';
		this.constructorOptions = constructorOptions;
	}

	generateImports(rootPaths) {
		return [
			{
				library: rootPaths.pathToUtilsRoot + '/ndefault-amqp-producer/AMQPProducer/Producer',
				modules: [
					"Producer"
				]
			}
		];
	}

	messageSnippet() {
		let msgSnippet = `let ${this.__bufferMsg} = null;`;
		let returnSnippet = '';
		if (this.messageType === 'Buffer') {
			returnSnippet = `${this.__bufferMsg} = ${this.message}`;
		} else if (this.messageType === 'String') {
			returnSnippet = `${this.__bufferMsg} = Buffer.from(${this.message})`;
		} else if (this.messageType === 'JSON') {
			returnSnippet = `${this.__bufferMsg} = Buffer.from(JSON.stringify(${this.message}))`;
		} else {
			returnSnippet = `
        if (${this.message} instanceof Buffer) {
          ${this.__bufferMsg} = ${this.message};
        } else if (typeof ${this.message} === 'string') {
          ${this.__bufferMsg} = Buffer.from(${this.message});
        } else {
          ${this.__bufferMsg} = Buffer.from(JSON.stringify(${this.message}));
        }
      `;
		}
		return `
      ${msgSnippet}
      ${returnSnippet}
    `;
	}

	init() {
		this.amqpConfigId = this.constructorOptions.amqpConfigId;
		this.producerQ = this.constructorOptions.producerQ;
		this.messageType = this.constructorOptions.messageType; // JSON / String / Buffer
		this.message = this.constructorOptions.message;
		this.publishOptions = this.constructorOptions.publishOptions;
		this.assertQueueOptions = this.constructorOptions.assertQueueOptions;
		// init variables that do not come from "this.constructorOptions"; 
		this.__bufferMsg = 'bufferMsg';
	}

	generateSnippet(serviceType, serviceClassTemplate) {
		this.init();
		const returnSnippet = `let configObj = this.sdService.getConfigObj('amqp-config', '${this.amqpConfigId}');
          const amqpProducerInstance = Producer.getInstance(configObj);
          ${this.messageSnippet()}
          await amqpProducerInstance.send({ 
            producerQ: ${this.producerQ},
            message: ${this.__bufferMsg}, 
            sendTOQOptions: ${this.publishOptions},
            assertQueueOptions: ${this.assertQueueOptions}
          });
      `;
		return returnSnippet;
	}
};
const BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;

module.exports = class Mongodb extends BaseComponent {
  constructor(constructorOptions) {
    super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_mongodb", "Mongodb");
    this.nodeOptions = constructorOptions;
    this.viewType = 'server';
  }

  init(options) {
    this.operation = options.operation;
    this.configId = options.databaseConfig
  }

  generateImports(rootPaths) {
    return [{
        library: rootPaths.pathToUtilsRoot + '/ndefault-mongodb/Mongodb/MongoPersistance',
        modules: [
          "MongoPersistance"
        ]
      },
      {
        library: 'mongodb',
        alias: 'mongodb',
      }
    ]
  }

  generateSnippet() {
    this.init(this.nodeOptions);
    return `${this.nodeOptions.resultMapping} = ${this.callFunction};`;
  }


  get functionName() {
    return this._functionName;
  }

  set functionName(functionName) {
    this._functionName = functionName;
  }

  get callFunction() {
    let that = this;
    let str = `${this.nodeOptions.operation}('${this.configId}', ${this.nodeOptions.collection}`;
    this.nodeOptions.argumentArray.forEach(ele => {
      str = `${str}, ${that.nodeOptions[ele]}`
    });
    let _options = this.nodeOptions.options ? this.nodeOptions.options : {};
    if (typeof _options !== 'string') {
      _options = JSON.stringify(_options);
    } 
    str = `${str}, ${_options})`;
    return `await MongoPersistance.getInstance().${(str)}`
  }

};
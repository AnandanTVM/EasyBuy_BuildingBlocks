let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;

module.exports = class Soap extends BaseComponent {
  constructor(constructorOptions) {
    super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_Soap", "Soap");
    this.functionName = constructorOptions.functionName;
    this.viewType = 'server';
    this.constructorOptions = constructorOptions;
    this.soapConfigId = constructorOptions.soapConfigId;
    this.basicAuthConfigId = constructorOptions.basicAuthId;
  }

  // TODO: import SoapConnections.ts
  generateImports(rootPaths) {
    return [
      {
        library: 'strong-soap',
        modules: ['soap']
      },
      {
        library: rootPaths.pathToUtilsRoot + '/ndefault-call-soap/Soap/SoapConnection',
        modules: ['SoapConnection']
      }
    ];
  }

  getCallTemplate() {
    return "bh = await this." + this.functionName + "(bh);";
  }

  generateSnippet() {
     return `
     let soapConfigObj = ${this.soapConfig};
     let basicAuthObj = ${this.basicAuthConfig};
     const clientInstance : any = await SoapConnection.getInstance('${this.constructorOptions.soapConfigId}', soapConfigObj, '${this.constructorOptions.wsdlFile}', ${this.constructorOptions.othoptions}, '${this.constructorOptions.authType}', basicAuthObj, ${this.constructorOptions.token});
     ${this.functionCall}`;
  }

  get functionCall() {
    return `
    const _soapPromise  =  () => {
      return new Promise((resolve, reject) => {
        clientInstance.${this.constructorOptions.services}.${this.constructorOptions.serviceVersions}.${this.constructorOptions.operations}( { ${this.construtParamsObj} } , ${this.callBackFun}, ${this.constructorOptions.othoptions}, ${this.constructorOptions.extraheaders})
          });
        }
        ${this.constructorOptions.resultMapping} =  await _soapPromise() ;
        `;
  }

  get callBackFun() {
    return `async (err, result) => {
      if (err) {
        return reject(err);
      } else {
        return resolve(result);
      }
    }`;
  }

  get construtParamsObj() {
    let params = '';
    for (let i = 0; i < this.constructorOptions.selectedParams.length; i++) {
      const _selectedParam = this.constructorOptions.selectedParams[i].label;
      params = params + (i !== (this.constructorOptions.selectedParams.length - 1) ? (`${_selectedParam}: ${this.constructorOptions.methodParameters[_selectedParam]},`) :
        (`${_selectedParam}: ${this.constructorOptions.methodParameters[_selectedParam]}`));
    }
    return (params);
  }
  set soapConfigId(configId) {
    if (configId) {
        this._soapConfigId = configId
    }
    else {
        this._soapConfigId = null;
    }
}

get soapConfigId() {
    return this._soapConfigId;
}

get soapConfig() {
    if (this.soapConfigId) {
        return `this.sdService.getConfigObj('soap-config','${this.soapConfigId}')`;
    }
    else {
        return `undefined`
    }
}
set basicAuthConfigId(configId) {
  if (configId) {
      this._basicAuthConfigId = configId
  }
  else {
      this._basicAuthConfigId = null;
  }
}

get basicAuthConfigId() {
  return this._basicAuthConfigId;
}
get basicAuthConfig() {
  if (this.basicAuthConfigId) {
      return `this.sdService.getConfigObj('basicauth-config','${this.basicAuthConfigId}')`;
  }
  else {
      return `undefined`
  }
}

};
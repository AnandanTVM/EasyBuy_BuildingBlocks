let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let util = require('@jatahworx/bhive-toolkits').SRDCodeGenUtil;
module.exports = class EmailOut extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_EmailOut", "EmailOut");

        this.mailConfigId = constructorOptions.emailoutconfig;

        //
        if (constructorOptions.routingoptions) {
            this.routingOptions = constructorOptions.routingoptions;
        }
        if (constructorOptions.contentoptions) {
            this.contentOptions = constructorOptions.contentoptions;
        }
        if (constructorOptions.headeroptions) {
            this.headerOptions = constructorOptions.headeroptions;
        }
        if (constructorOptions.securityoptions) {
            this.securityOptions = constructorOptions.securityoptions;
        }
        if (constructorOptions.iCal) {
            this.iCal = constructorOptions.iCal;
        }
        if (constructorOptions.html) {
            this.html = constructorOptions.html;
        }
        if (constructorOptions.attachment) {
            this.attachments = constructorOptions.attachment;

        }

        
        if (constructorOptions.to) {
            this.from = constructorOptions.from; // string | map
            this.to = constructorOptions.to; // string | map
            this.cc = constructorOptions.cc; // string | map
            this.bcc = constructorOptions.bcc; // string | map
            this.subject = constructorOptions.subject; // string | map
            this.body = constructorOptions.body; // string | map

            this.envolope = this.routingOptions.envelope; // string | map
            this.inReplyTo = this.routingOptions.inreplyto; // string | map
            this.references = this.routingOptions.reference; // string | map
            this.filename = constructorOptions.filename; // string | map
            // Like http headers
            this.headers = this.headerOptions;
            this.defaultMessage = constructorOptions.defmsg; // string | map
        }

        if (constructorOptions.resultMapping) {
            // throw new Error('Result mapping is missing.');
            // this.resultMapping = srdUtil.getValueFromTypedInput(constructorOptions.resultMapping);
            this.resultMapping = constructorOptions.resultMapping;
        }
        this.viewType = 'server';
    }

    generateImports(rootPaths) {
        return [
            {
                library: rootPaths.pathToUtilsRoot + '/ndefault-email/EmailOut/EmailOutService',
                modules: [
                    'EmailOutService'
                ]
            }
        ]
    }
    
    generateSnippet() {
        return `let mailConfigObj = ${this.mailConfig};
				let server = mailConfigObj.server;
				let port = mailConfigObj.port;
				let secure = mailConfigObj.secure;
				let tls = mailConfigObj.tls;
				let userid = mailConfigObj.userid;
				let password = mailConfigObj.password;
				let emailServiceInstance = EmailOutService.getInstance();
				${this.resultMapping} = await emailServiceInstance.sendEmail({
					server,
					port,
					secure,
					tls
				},{
					userid,
					password,
					${this.to}${this.subject}${this.body}${this.cc}${this.bcc}${this.from}${this.html}${this.iCal}${this.routingOptions}${this.contentOptions}${this.securityOptions}${this.headerOptions}${this.attachments}
				});`;
    }



    get server() {
        if (typeof this.__server == 'string') {
            return 'server: ' + this.__server + ',\n';
        }
        return '';
    }
    set server(server) {
        if (server && typeof server != 'string') {
            throw new Error('server should be of type string');
        }
        this.__server = server;
    }

    get port() {
        if (typeof this.__port == 'number') {
            return 'port: ' + this.__port + ',\n';
        }
        return '';
    }
    set port(port) {
        if (typeof port != 'number') throw new Error('port should be of type number');
        this.__port = port;
    }

    get secure() {
        if (typeof this.__secure == 'boolean') {
            return 'secure: ' + this.__secure + ',\n';
        }
        return '';
    }
    set secure(secure) {
        if (typeof secure != 'boolean') throw new Error('secure should be of type boolean');
        this.__secure = secure;
    }

    get tls() {
        if (typeof this.__tls == 'boolean') {
            return 'tls: ' + this.__tls + ',\n';
        }
        return '';
    }
    set tls(tls) {
        if (typeof tls != 'boolean') throw new Error('tls should be of type boolean');
        this.__tls = tls;
    }

    get userid() {
        if (typeof this.__userid == 'string') {
            return 'userid: ' + this.__userid + ',\n';
        }
        return '';
    }
    set userid(userid) {
        if (typeof userid != 'string') throw new Error('userid should be of type string');
        this.__userid = userid;
    }

    get password() {
        if (typeof this.__password == 'string') {
            return 'password: ' + this.__password + ',\n';
        }
        return '';
    }
    set password(password) {
        if (typeof password != 'string') throw new Error('password should be of type string');
        this.__password = password;
    }

    get to() {
        if (this.__to) {
            return 'to: ' + this.__to + ',\n';
        }
        return '';
    }
    set to(to) {
        this.__to = to;
    }

    get subject() {
        if (typeof this.__subject == 'string' && this.__subject) {
            return 'subject: ' + this.__subject + ',\n';
        }
        return '';
    }
    set subject(subject) {
        if (typeof subject != 'string') throw new Error('subject should of type string');
        this.__subject = subject;
    }

    get body() {
        return typeof this.__body == 'string' ? 'body: ' + this.__body + ',\n': '';
    }
    set body(body) {
        // if (body && typeof body != 'string') throw new Error('body should be of type string');
        this.__body = body;
    }

    get cc() {
        return this.__cc ? 'cc: ' + this.__cc + ',\n': '';
    }
    set cc(cc) {
        if (cc) {
            this.__cc = cc;
        } else {
            this.__cc = '';
        }
    }

    get bcc() {
        return this.__bcc ? 'bcc: ' + this.__bcc + ',\n': '';
    }
    set bcc(bcc) {
        if (bcc) {
            this.__bcc = bcc;
        } else {
            this.__bcc = '';
        }
    }

    get from() {
        return typeof this.__from == 'string' ? 'from: ' + this.__from + ',\n': '';
    }
    set from(from) {
        if (from && typeof from != 'string') throw new Error('from should be of type string');
        this.__from = from;
    }

    get filename() {
        return typeof this.__filename == 'string' ? 'filename: ' + this.__filename + ',\n': '';
    }
    set filename(filename) {
        if (filename && typeof filename != 'string') throw new Error('filename should be of type string');
        this.__filename = filename;
    }

    get headers() {
        // return typeof this.__headers == 'object' ? 'headers: ' + JSON.stringify(this.__headers) : '';
        return  'headers: ' + JSON.stringify(this.__headers) + ',\n' ;
    }
    set headers(headers) {
        // if (headers && typeof headers != 'object') throw new Error('headers should of type Object of headers {\'Content-Type\': \'application/json\'}');
        this.__headers = headers;
    }

    get defaultMessage() {
        return typeof this.__defaultMessage == 'string' ? 'defaultMessage: ' + this.__defaultMessage + ',\n': '';
    }
    set defaultMessage(defaultMessage) {
        if (defaultMessage && typeof defaultMessage != 'string') throw new Error('defaultMessage should be of type string');
        this.__defaultMessage = defaultMessage;
    }

    get attachments() {
        return 'attachments: '+ this._attachments ;
    }

    set attachments(attachments) {

        if (attachments instanceof Array) {
            this._attachments = '['
            for (let i = 0; i < attachments.length; i++) {
                let attachmentObj = attachments[i];

                if (attachmentObj) {
                    this._attachments += '{'
                    if (attachmentObj['content']) {
                        this._attachments += `"content": ${(new util()).getValueFromTypedInput(attachmentObj['content'])}`;
                        this._attachments += ','
                    }
                    if (attachmentObj['filename']) {
                        this._attachments += `"filename": ${(new util()).getValueFromTypedInput(attachmentObj['filename'])}`;
                        this._attachments += ','
                    }
                    if (attachmentObj['filepath']) {
                        this._attachments += `"path": ${(new util()).getValueFromTypedInput(attachmentObj['filepath'])}`;
                        this._attachments += ','
                    }
                    if (attachmentObj['encoding']) {
                        this._attachments += `"encoding": ${JSON.stringify(attachmentObj['encoding'])}`;
                    }
                }
                this._attachments += '},'
            }
            this._attachments += ']'
        } else if (attachments && attachments.hasOwnProperty('type') && attachments.hasOwnProperty('value') && attachments.type && attachments.value) {
            this._attachments = (new util()).getValueFromTypedInput(attachments);
        } else {
            this._attachments = undefined;
        }



    }
    //
    get routingOptions() {
        return 'routingOptions: '+ this.__routingOptions +',\n';
    }
    set routingOptions(routingOptions) {
        if (routingOptions) {
            this.__routingOptions = routingOptions;
        } else {
            this.__routingOptions = '';
        }
    }

    get contentOptions() {
        return 'contentOptions: '+ this.__contentOptions +',\n';
    }
    set contentOptions(contentOptions) {
        if (contentOptions) {
            this.__contentOptions = contentOptions;
        } else {
            this.__contentOptions = '';
        }
    }

    get headerOptions() {
        return 'headerOptions: '+ this.__headerOptions +',\n';
    }
    set headerOptions(headerOptions) {
        if (headerOptions) {
            this.__headerOptions = headerOptions;
        } else {
            this.__headerOptions = '';
        }
    }

    get securityOptions() {
        return 'securityOptions: '+ this.__securityOptions +',\n';
    }
    set securityOptions(securityOptions) {
        if (securityOptions) {
            this.__securityOptions = securityOptions;
        } else {
            this.__securityOptions = '';
        }
    }

    get iCal() {
        return 'iCal: '+ this.__iCal +',\n';
    }
    set iCal(iCal) {
        if (iCal) {
            this.__iCal = iCal;
        } else {
            this.__iCal = '';
        }
    }
    get html() {
        return 'html: '+ this.__html +',\n';
    }
    set html(html) {
        if (html) {
            this.__html = html;
        } else {
            this.__html = '';
        }
    }

    set mailConfigId(configId) {
        if (configId) {
            this._mailConfigId = configId
        }
        else {
            this._mailConfigId = null;
        }
    }

    get mailConfigId() {
        return this._mailConfigId;
    }

    get mailConfig() {
        if (this.mailConfigId) {
            return `this.sdService.getConfigObj('emailout-config','${this.mailConfigId}')`;
        }
        else {
            return `undefined`
        }
    }
}

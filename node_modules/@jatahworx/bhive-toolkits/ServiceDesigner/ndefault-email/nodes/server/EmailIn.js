let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let SRDCodeGenUtil = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;

// TODO: @paulthomas0 https://github.com/mscdex/node-imap/issues/694
// TODO: May need to find a alternate library for fixing this issue
module.exports = class EmailIn extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_EmailIn", "EmailIn");
        let srdUtil = new SRDCodeGenUtil();
        // server options
        this.serverOptions = srdUtil.getTypedInputValues(constructorOptions.serverOptions);
        this.emailOptions = srdUtil.getTypedInputValues(constructorOptions.emailOptions);
        this.server = this.serverOptions.server; // string
        this.port = this.serverOptions.port; // number
        this.useSSL = this.serverOptions.useSSL; // boolean
        this.tls = this.serverOptions.tls; // boolean

        // email options
        this.maxCount = this.emailOptions.maxCount; // number
        this.box = this.emailOptions.box; // string - 'INBOX' - dropdown
        this.protocol = this.emailOptions.protocol; // IMAP or POP3
        // Flag to set after reading - Read
        this.disposition = this.emailOptions.disposition; // string
        this.criteria = this.emailOptions.criteria; // string[] - [UNSEEN] - dropdown
        this.userid = this.emailOptions.userid; // string
        this.password = this.emailOptions.password; // string

        // imap options
        this.imapConnectionTimeout = this.emailOptions.imapConnectionTimeout;
        this.imapAuthTimeout = this.emailOptions.imapAuthTimeout;

        if ((this.imapConnectionTimeout && !this.imapAuthTimeout) || (this.imapAuthTimeout && !this.imapConnectionTimeout)) {
            throw new Error('Please, specify both imap connection and auth timeouts');
        }
        this.resultMapping = srdUtil.getValueFromTypedInput(constructorOptions.resultMapping); // bh.value
    }

    generateSnippet() {
        let imapConnectionOptions = '';
        if (this.imapConnectionTimeout && this.imapAuthTimeout) {
            imapConnectionOptions = `
            ,\nimapTimeouts: {
                ${this.imapAuthTimeout},
                ${this.imapConnectionTimeout} 
            }
            `;
        }
		return `${this.resultMapping} = await this.sdService.getEmails({
				${this.server}${this.port}${this.useSSL}${this.tls}
			},{
				${this.maxCount}${this.box}${this.protocol}${this.disposition}${this.critera}${this.userid}${this.password}${imapConnectionOptions}
			});`;
    }



    set server(server) {
        this.__server = '';
        if (server) {
            if (typeof server != 'string') throw new Error('server or hostname should be a string');
            this.__server = server;
        }
    }
    get server() {
        if (this.__server) {
            return 'server: ' + this.__server + ',\n';
        }
        return '';
    }

    set port(port) {
        this.__port = '';
        if (port) {
            if (typeof port != 'number') throw new Error('port should be of type number');
            this.__port = port;
        }
    }
    get port() {
        if (this.__port) {
            return 'port: ' + this.__port + ',\n';
        }
        return '';
    }

    set useSSL(useSSL) {
        this.__useSSL = '';
        if (typeof useSSL == 'boolean') {
            this.__useSSL = useSSL;
        }
    }
    get useSSL() {
        if (typeof this.__useSSL == 'boolean') {
            return 'useSSL: ' + this.__useSSL + ',\n';
        }
        return '';
    }

    set tls(tls) {
        if (typeof tls == 'boolean') {
            this.__tls = tls;
        }
    }
    get tls() {
        if (typeof this.__tls == 'boolean') {
            return 'tls: ' + this.__tls + '\n';
        }
    }

    set maxCount(maxCount) {
        if (this.__maxCount) {
            if (typeof this.__maxCount != 'number') throw new Error('maxCount should be of type number');
            this.__maxCount = maxCount;
        }
    }
    get maxCount() {
        if (this.__maxCount) {
            return 'maxCount: ' + this.__maxCount + ',\n';
        }
        return '';
    }

    set box(box) {
        if (box) {
            if (typeof box != 'string') throw new Error('box should of type string');
            this.__box = box;
        }
    }
    get box() {
        if (this.__box) {
            return 'box: ' + this.__box + ',\n';
        }
        return '';
    }

    set protocol(protocol) {
        if (protocol) {
            if (!['"IMAP"', '"POP3"'].includes(protocol)) {
                throw new Error('protocol should be either a IMAP or POP3');
            }
            this.__protocol = protocol;
        }
    }
    get protocol() {
        if (this.__protocol) {
            return 'protocol: ' + this.__protocol + ',\n';
        }
        return '';
    }

    set disposition(disposition) {
        if (disposition) {
            if (typeof disposition != 'string') throw new Error('email disposition should be of type string');
            this.__disposition = disposition;
        }
    }
    get disposition() {
        if (this.__disposition) {
            return 'disposition: ' + this.__disposition + ',\n';
        }
        return '';
    }

    set criteria(criteria) {
        if (criteria) {
            if (typeof criteria != 'string') throw new Error('criteria should be of type string');
            this.__criteria = criteria;
        }
    }
    get critera() {
        if (this.__criteria) {
            return 'criteria: ' + this.__criteria + ',\n';
        }
        return '';
    }

    set userid(userid) {
        if (userid) {
            if (typeof userid != 'string') throw new Error('userid should be of type of string');
            this.__userid = userid;
        }
    }
    get userid() {
        if (this.__userid) {
            return 'userid: ' + this.__userid + ',\n';
        }
        return '';
    }

    set password(password) {
        if (password) {
            if (typeof password != 'string') throw new Error('password should of type string');
            this.__password = password;
        }
    }
    get password() {
        if (this.__password) {
            return 'password: ' + this.__password + '\n';
        }
    }

    get imapConnectionTimeout() {
        return this.__imapConnectionTimeout ? 'connectionTimeout: ' + this.__imapConnectionTimeout + '\n,': '';
    }
    set imapConnectionTimeout(imapConnectionTimeout) {
        if (imapConnectionTimeout) {
            this.__imapConnectionTimeout = imapConnectionTimeout;
        }
    }

    get imapAuthTimeout() {
        return this.__imapAuthTimeout ? 'authTimeout: ' + this.__imapAuthTimeout + '\n' : '';
    }
    set imapAuthTimeout(imapAuthTimeout) {
        if (imapAuthTimeout) {
            this.__imapAuthTimeout = imapAuthTimeout;
        }
    }
}

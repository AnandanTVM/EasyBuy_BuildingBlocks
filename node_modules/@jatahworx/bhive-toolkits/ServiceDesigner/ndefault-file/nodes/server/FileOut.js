let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let path = require('path');
let statusCodes = require('http-status-codes');
let SRDCodeGenUtil = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;
/*
* File In
* !!Warning - This is not file-in node which reads
* a file
*/
module.exports = class FileOut extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_FileOut", "FileOut");
        let srdUtil = new SRDCodeGenUtil();
        let r = srdUtil.getTypedInputValues(constructorOptions);


        // this.filename = constructorOptions.filepath;
        this.appendNewline = constructorOptions.appendNewline;
        this.createDir = constructorOptions.createDir || false;
        this.encoding = constructorOptions.encoding || "none";
        this.overwriteFile = constructorOptions.overwriteFile;
        this.isStreaming = constructorOptions.isStreaming;
        if (constructorOptions.filepath) {
            this.filename = r.filepath;
        }
        if (constructorOptions.resultMapping) {
            this.payloadMapping = r.resultMapping;
        }

        
        this.errorMapping = constructorOptions.errorMapping;

        this.viewType = 'server';
    }



    generateImports(rootPaths) {
        return [
            {
                library: rootPaths.pathToUtilsRoot + '/ndefault-file/FileOut/FileOutService',
                modules: [
                    'FileOutService'
                ]
            }
        ]
    }

    generateSnippet() {
        if (!this.filename || !this.payloadMapping) {
            throw new Error('File-out node: Options missing. filename, encoding and resultMapping are required.');
        }

        this.filename = this.filename.replace(/\\/g, '\\\\');
        if (this.errorMapping && this.errorMapping.status) {
            let statuses = Object.values(statusCodes);
            if (!statuses.includes(this.errorMapping.status)) {
                throw new Error('Response status is not a valid status number.');
            }
        }
		return `let fileOutService = FileOutService.getInstance();
			await fileOutService.fileOut({
				filepath: ${this.filename},
				payload: ${this.payloadMapping}${this.appendNewline}${this.overwriteFile}${this.createDir}${this.isStreaming}${this.encoding}
			});`;
    }

    set encoding(encoding) {
        this.__encoding = '';
        if (encoding && encoding !== 'utf8') {
            this.__encoding = ',\nencoding : \'' + encoding + '\'';
        }
    }

    get encoding() {
        return this.__encoding;
    }

    set appendNewline(appendNewline) {
        this.__appendNewline = '';
        if (appendNewline) {
            this.__appendNewline = ',\appendNewline : ' + appendNewline;
        }
    }

    get appendNewline() {
        return this.__appendNewline;
    }

    set overwriteFile(overwriteFile) {
        this.__overwriteFile = '';
        if (overwriteFile)  {
            this.__overwriteFile = ',\overwriteFile : ' + overwriteFile;
        }
    }

    get overwriteFile() {
        return this.__overwriteFile;
    }

    set createDir(createDir) {
        this.__createDir = '';
        if (createDir) {
            this.__createDir = ',\ncreateDir : ' + createDir;
        }
    }

    get createDir() {
        return this.__createDir;
    }

    set isStreaming(isStreaming) {
        this.__isStreaming = '';
        if (isStreaming) {
            this.__isStreaming = ',\nisStreaming: true';
        }
    }

    get isStreaming() {
        return this.__isStreaming;
    }
}

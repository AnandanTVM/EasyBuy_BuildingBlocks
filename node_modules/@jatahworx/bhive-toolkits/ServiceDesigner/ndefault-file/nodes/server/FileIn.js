let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let path = require('path');
let SRDCodeGenUtil = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;

module.exports = class FileIn extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_FileIn", "FileIn");

        this.__formats = ['stream', 'buffer', 'utf8'];
        let srdUtil = new SRDCodeGenUtil();
        let r = srdUtil.getTypedInputValues(constructorOptions);

        // this.filename = constructorOptions.filepath;
        if (constructorOptions.filepath) {
            this.filename = r.filepath;
        }

        this.encoding = constructorOptions.encoding || "none";
        this.format = constructorOptions.format;
        if (constructorOptions.resultMapping) {
            this.resultMapping = r.resultMapping;
        }
        this.errorMapping = constructorOptions.errorMapping;

        this.viewType = 'server';
    }

    generateImports(rootPaths) {
        return [
            {
                library: rootPaths.pathToUtilsRoot + '/ndefault-file/FileIn/FileInService',
                modules: [
                    'FileInService'
                ]
            }
        ]
    }

    generateSnippet() {
        if (this.filename) {
            this.filename = this.filename.replace(/\\/g, '\\\\');
        } else {
            throw new Error('File-out node: Not a valid path.');
        }
        if (!this.__formats.includes(this.format)) {
            throw new Error('File-out node: Invalid format selected. It should be either buffer, stream or utf8');
        }
		return `let fileInServiceInstance = FileInService.getInstance();
			${this.resultMapping} = await fileInServiceInstance.fileIn({
				filepath: ${this.filename},
				format: '${this.format}'${this.encoding}
			});`;
    }



    set encoding(encoding) {
        this.__encoding = '';
        if (encoding) {
            this.__encoding = ',\nencoding : \'' + encoding + '\'';
        }
    }

    get encoding() {
        return this.__encoding;
    }

}

let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
const SRDCodeGenUtils = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;

module.exports = class Storage extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, 'neutrinos_service_designer_storage', 'Storage');
        const getValueFromTypedInput = (new SRDCodeGenUtils()).getValueFromTypedInput;

        this.storageType = constructorOptions.storageType;
        this.operationType = constructorOptions.operationType;
        this.key = constructorOptions.key ? getValueFromTypedInput(constructorOptions.key) : null;
        this.value = constructorOptions.value ? getValueFromTypedInput(constructorOptions.value) : null;
        this.resultMapping = constructorOptions.resultMapping ? getValueFromTypedInput(constructorOptions.resultMapping) : null;
        this.allStorageTypes = ['localStorage', 'sessionStorage'];
        this.viewType = 'client';
    }


    generateSnippet() {
        return this.storageSnippet();
    }

    storageSnippet() {
        let args = ''; // "clear()" doesn't take any args. So, no need to check for the "clear" operationType.
        if (this.operationType === 'setItem') {
            args = `${this.key}, JSON.stringify(${this.value})`;
        } else if (this.operationType === 'getItem') {
            return `${this.resultMapping} = JSON.parse(${this.storageType}.${this.operationType}(${this.key}));`;
        } else if (this.operationType === 'removeItem') {
            args = this.key;
        }
        return (this.storageType === 'all') ? this.__appendMethodAndArgs(`${this.operationType}(${args})`) : `${this.storageType}.${this.operationType}(${args})`;
    }

    __appendMethodAndArgs(methodAndArgs) {
        let codeSnip = '';
        this.allStorageTypes.forEach(v => {
            codeSnip += `${v}.${methodAndArgs}; `;
        });
        return codeSnip;
    }
};
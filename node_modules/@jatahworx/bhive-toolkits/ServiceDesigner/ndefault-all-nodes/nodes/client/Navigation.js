let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
const SRDCodeGenUtil = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;

module.exports = class Navigation extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, 'neutrinos_service_designer_navigation', 'Navigation');
        this.getValueFromTypedInput = (new SRDCodeGenUtil()).getValueFromTypedInput;


        /* captures path */
        this.path = (constructorOptions.path ? '"' + constructorOptions.path + '"' : null) ||
            (constructorOptions.pathMap ? this.getValueFromTypedInput(constructorOptions.pathMap) : null);

        /* captures pathparms */
        this.pathparams = (constructorOptions.pathparams) ||
            (constructorOptions.pathparamsMap ? this.getValueFromTypedInput(constructorOptions.pathparamsMap) : null) ||
            JSON.stringify(constructorOptions.pathMapPathParams);

        /* captures query params */
        this.qparams = (constructorOptions.qparamsMap ? this.getValueFromTypedInput(constructorOptions.qparamsMap) : null) || JSON.stringify(constructorOptions.qparams);

        /* captures rult mapping */
        this.resultMapping = constructorOptions.resultMapping ? this.getValueFromTypedInput(constructorOptions.resultMapping) : null;
        this.viewType = 'client';
    }


    generateSnippet() {
        return this.__navigationSnippet();
    }

    set pathparams(pathparams) {
        if (pathparams instanceof Array) {
            const paramObj = {};
            pathparams.map(pathparam => ({
                key: pathparam.paramKey,
                value: this.getValueFromTypedInput(pathparam.paramValue)
            })).forEach(pKv => { paramObj[pKv.key] = pKv.value; });
            this.__pathparams = paramObj;
        } else {
            this.__pathparams = pathparams;
        }
    }

    get pathparams() {
        return this.__pathparams;
    }

    __navigationSnippet() {
        let snip = `const { paramObj: qprm, path: path } = this.sdService.getPathAndQParamsObj(${this.path});`;
        const resultMappingSnip = this.resultMapping ? `${this.resultMapping} = ` : '';
        if (this.qparams) {
            snip = `${snip}
            ${resultMappingSnip}await this.router.navigate([this.sdService.formatPathWithParams(path, ${this.getObjAsString(this.pathparams)})], {
                queryParams: Object.assign(qprm, ${this.getObjAsString(this.qparams)}),
            });`;
        } else {
            snip = `${snip}
            ${resultMappingSnip}await this.router.navigate([this.sdService.formatPathWithParams(path, ${this.getObjAsString(this.pathparams)})]);`;
        }
        return snip;
    }

    getObjAsString(object) {
        if (!(object instanceof Object))
            return object;
        let objectAsString = '{';
        Object.entries(object).forEach(v => { objectAsString += `${v[0]}: ${v[1]},`; });
        if (objectAsString[objectAsString.length - 1] === ',') {
            objectAsString = objectAsString.slice(0, -1);
        }
        objectAsString += '}';
        return objectAsString;
    }
};
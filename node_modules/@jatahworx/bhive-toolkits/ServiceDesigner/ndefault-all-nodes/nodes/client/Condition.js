const BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let uuid = require("@jatahworx/bhive-toolkits").BGuid;

module.exports = class Condition {
    constructor(constructorOptions, nodes, elseFlag) {
        this.nodes = nodes;
        this.expressionType = constructorOptions.t;
        this.expressionValue1 = constructorOptions.gv;
        this.expressionValue2 = constructorOptions.gv2;
        this.regCase = constructorOptions.case;
        this.elseFlag = elseFlag;
    }

    get nodes() {
        return this._nodes;
    }

    set nodes(nodes) {
        this._nodes = nodes;
    }

    get expressionType() {
        return this._expressionType;
    }

    set expressionType(expressionType) {
        this._expressionType = expressionType;
    }

    get expressionValue1() {
        return this._expressionValue1;
    }

    set expressionValue1(expressionValue1) {
        this._expressionValue1 = expressionValue1;
    }

    get expressionValue2() {
        return this._expressionValue2;
    }

    set expressionValue2(expressionValue2) {
        this._expressionValue2 = expressionValue2;
    }

    get regCase() {
        return this._regCase;
    }

    set regCase(regCase) {
        this._regCase = regCase;
    }

    get template() {
        const type = this.expressionType;
        let callString = "";
        for (let i = 0; i < this.nodes.length; i++) {
            callString += `bh = await this.${this.nodes[i].functionName}(bh);`;
        }
        return `if (this.sdService.operators["${type}"](${this.property}, ${this.expressionValue1}, ${this.expressionValue2}, ${this.regCase})) {
           ${callString}
           ${this.elseFlag ? this.elseFlag + ' = false;' : ''}
        }`;
    }

    generateSnippet(property) {
        this.property = property;
        return this.template;
    }
};
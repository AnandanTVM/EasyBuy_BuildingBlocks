let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;

module.exports = class HttpRequest extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_http", "HttpRequest");
        // http method - get, post, put.. etc...
        this.method = constructorOptions.methodMapping || JSON.stringify(constructorOptions.method);
        this.url = constructorOptions.urlMapping || JSON.stringify(constructorOptions.urlValue);
        this.ret = constructorOptions.retMapping || JSON.stringify(constructorOptions.ret);
        this.body = constructorOptions.reqBody;
        this.params = constructorOptions.paramMapping || JSON.stringify(constructorOptions.params);
        this.headers = constructorOptions.headerMapping || JSON.stringify(constructorOptions.headers);
        this.reportProgress = constructorOptions.reportProgress
        this.resultMapping = constructorOptions.resultMapping;
        this.viewType = 'client';

    }


    generateSnippet() {
        return `let requestOptions = {
				url : ${this.url},
				method : ${this.method},
				responseType : ${this.ret},
				reportProgress : ${this.reportProgress},
				headers : ${this.headers},
				params : ${this.params},
				body : ${this.body}
			}
			${this.resultMapping} = await this.sdService.nHttpRequest(requestOptions);`;
    }


    /********* getters and setters******** */
    get method() {
        return this._method;
    }

    set method(method) {
        this._method = method;
    }

    get methodMapping() {
        return this._methodMapping;
    }

    set methodMapping(methodMapping) {
        this._methodMapping = methodMapping;
    }

    get url() {
        return this._url;
    }

    set url(url) {
        this._url = url
    }

    get urlMapping() {
        return this._urlMapping;
    }

    set urlMapping(urlMapping) {
        this._urlMapping = urlMapping;
    }

    get ret() {
        return this._ret;
    }

    set ret(ret) {
        this._ret = ret;
    }

    get retMapping() {
        return this._retMapping;
    }

    set retMapping(retMapping) {
        this._retMapping = retMapping;
    }

    get body() {
        return this._body ? this._body : undefined;
    }

    set body(body) {
        this._body = body;
    }

    get params() {
        return this._params;
    }

    set params(params) {
        this._params = params;
    }

    get paramMapping() {
        return this._paramMapping;
    }

    set paramMapping(paramMapping) {
        this._paramMapping = paramMapping;
    }

    get headers() {
        return this._headers;
    }

    set headers(headers) {
        this._headers = headers;
    }

    get headerMapping() {
        return this._headerMapping;
    }

    set headerMapping(headerMapping) {
        this._headerMapping = headerMapping;
    }

}
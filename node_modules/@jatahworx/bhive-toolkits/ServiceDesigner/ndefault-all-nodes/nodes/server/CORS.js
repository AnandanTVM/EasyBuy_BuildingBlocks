let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let statusCodes = require('http-status-codes');

module.exports = class CORS extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_CORS", "CORS");
        this.viewType = BaseComponent.viewTypes.SERVER;
        this.constructs = constructorOptions;
        // express-session options
        if (constructorOptions.showOriginToggleButton) {
            this.origin = constructorOptions.origin;
        } else if (constructorOptions.editableListData && constructorOptions.editableListData.origin instanceof Array && constructorOptions.editableListData.origin.length) {
            this.origin = constructorOptions.editableListData.origin;
        }
        if (constructorOptions.editableListData) {
            this.methods = constructorOptions.editableListData.methods;
            this.allowedHeaders = constructorOptions.editableListData.allowedHeaders;
            this.exposedHeaders = constructorOptions.editableListData.exposedHeaders;
        }
        this.credentials = constructorOptions.credentials;
        this.maxAge = constructorOptions.maxAge;
        this.optionsSuccessStatus = constructorOptions.optionsSuccessStatus;
        this.preflightContinue = constructorOptions.preflightContinue;
        this.nodeType = BaseComponent.nodeTypes.MIDDLEWARE;
    }

    generateImports(rootPaths) {
        return [
            {
                library: 'cors',
                alias: 'cors',
            }
        ]
    }

    updatePackageJSON() {
        return [
            {
                name: 'cors',
                version: '2.8.5'
            }
        ]
    }

    generateSnippet() {
		return {
			nodeSnippet: `let corsOptions = {
					${this.origin}
					${this.methods}
					${this.allowedHeaders}
					${this.exposedHeaders}
					${this.credentials}
					${this.maxAge}
					${this.preflightContinue}
					${this.optionsSuccessStatus}
				}
				return cors(corsOptions);`,
			async: false
		};
    }

    get origin() {
        if (typeof this.__origin === 'boolean') {
            return `origin: ${this.__origin},`;
        } else if (this.__origin instanceof Array) {
            return `origin: [${this.__origin.length > 1 ? this.__origin.reduce((accumulator, currentValue) => {
                let nv = '';
                let av = '';
                if (currentValue.type == 're') {
                    nv = '/' + currentValue.key + '/,';
                } else if(currentValue.type == 'str') { 
                    nv = '\'' + currentValue.key + '\','; 
                }
                else {
                    nv = `process.env.${currentValue.key}` +  ',';
                }

                if (accumulator.type == 're') {
                    av = '/' + accumulator.key + '/,';
                } else if (accumulator.type == 'str') { 
                    av = '\'' + accumulator.key + '\','; 
                } else if (accumulator.type == 'process.env') {
                    av = `process.env.${accumulator.key}` +  ',';
                }
                else {
                    av = accumulator;
                }
                return av + nv;
            }) : this.getOrigin(this.__origin[0])}],`;
        }
        return '';
    }

    getOrigin(row) {
        if (!row) return '';
        if (row.type === 're') {
            return '/' + row.key + '/,';
        } else if(row.type == 'str') {
            return '\'' + row.key + '\',';
        }
        else {
            return `process.env.${row.key}` +  ',';
        }
    }

    set origin(origin) {
        this.__origin = origin;
    }

    get methods() {
        if (this.__methods instanceof Array && this.__methods.length) {
            return `methods: ${JSON.stringify(this.__methods.map(v => v.key))},`;
        }
        return '';
    }

    set methods(methods) {
        this.__methods = methods;
    }

    get allowedHeaders() {
        if (this.__allowedHeaders instanceof Array && this.__allowedHeaders.length) {
            return `allowedHeaders: ${JSON.stringify(this.__allowedHeaders.map(v => v.key))},`;
        }
        return '';
    }

    set allowedHeaders(allowedHeaders) {
        this.__allowedHeaders = allowedHeaders;
    }

    get exposedHeaders() {
        if (this.__exposedHeaders instanceof Array && this.__exposedHeaders.length) {
            return `exposedHeaders: ${JSON.stringify(this.__exposedHeaders.map(v => v.key))},`;
        }
        return '';
    }

    set exposedHeaders(exposedHeaders) {
        this.__exposedHeaders = exposedHeaders;
    }

    get credentials() {
        return `credentials: ${this.__credentials},`;
    }

    set credentials(credentials) {
        this.__credentials = credentials;
    }

    get maxAge() {
        if (this.__maxAge != null && this.__maxAge != undefined && this.__maxAge != '') {
            return `maxAge: ${this.__maxAge},`;
        }
        return '';
    }

    set maxAge(maxAge) {
        this.__maxAge = maxAge;
    }

    get preflightContinue() {
        return `preflightContinue: ${this.__preflightContinue},`;
    }

    set preflightContinue(preflightContinue) {
        this.__preflightContinue = preflightContinue;
    }

    get optionsSuccessStatus() {
        if (this.__optionsSuccessStatus != null && this.__optionsSuccessStatus != undefined && this.__optionsSuccessStatus != '') {
            return `optionsSuccessStatus: ${this.__optionsSuccessStatus},`;
        }
        return '';
    }

    set optionsSuccessStatus(optionsSuccessStatus) {
        this.__optionsSuccessStatus = optionsSuccessStatus;
    }

    getErrorTemplate() {
        return `
        let c = {
            //appendnew_node
        }
        `;
    }
}

let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;

module.exports = class TimerStart extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_TimerStart", "TimerStart");
        this.timerName = constructorOptions.id;
        this.functionName = `tmr_${this.timerName}`;
        this.serviceName = constructorOptions.serviceName;
        // interval || timeout || cron
        this.timerType = constructorOptions.timerType;
        this.interval = constructorOptions.interval;
        this.timeout = constructorOptions.timeout;
        this.cron = constructorOptions.cron;
        this.nodeType = BaseComponent.nodeTypes.START;
    }

    generateSnippet() {
        let intervalSnippet = `let ${this.timerName} = async () => {
            let bh = { local: {}, input: {} };
            bh = this.sdService.__constructDefault(bh);
            //appendnew_next_${this.functionName}
          };
          this.globalTimers.push({'timerName': '${this.timerName}', 'timerType': 'interval', 'timerObject': setInterval(${this.timerName}, ${this.interval})});`;

        let timeoutSnippet = `let ${this.timerName} = () => {
            let bh = { local: {}, input: {} };
            bh = this.sdService.__constructDefault(bh);
            //appendnew_next_${this.functionName}
          };
          this.globalTimers.push({'timerName': '${this.timerName}', 'timerType': 'timeout', 'timerObject': setTimeout(${this.timerName}, ${this.timeout})});`;

        let cronSnippet = `let ${this.timerName} = () => {
            let bh = { local: {}, input: {} };
            bh = this.sdService.__constructDefault(bh);
            //appendnew_next_${this.functionName}
          };
          this.globalTimers.push({'timerName': '${this.timerName}', 'timerType': 'cron', 'timerObject': new cron.CronJob(${this.cron}, ${this.timerName}, null, true)});`;

        if (this.timerType === 'interval') {
            return intervalSnippet;
        }
        else if (this.timerType === 'timeout') {
            return timeoutSnippet;
        }
        else if (this.timerType === 'cron') {
            return this.cronSnippet;
        }
        else{
            throw new Error('invalid timer type');
        }
    }

    getErrorTemplate() {
        return `
          export class errorCheck {
              sampleMethod() {
                  //appendnew_node
              }
          }
          `
        }
}
let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;

module.exports = class Catch extends BaseComponent {
    constructor(constructorOptions) {

        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_catch", "Catch");
        this.functionName = constructorOptions.functionName;
        this.serviceName = constructorOptions.serviceName;
        this.selectedNodes = constructorOptions.selectedNodes;
        this.viewType = 'common';
        this.nodeType = BaseComponent.nodeTypes.START;
        this.ignoreList = constructorOptions.ignoreList;
    }

    generateSnippet() {
        let snip = ` //appendnew_next_${this.functionName}
                    return true;`;
        if (Array.isArray(this.selectedNodes)) {
            snip = `const nodes = ${JSON.stringify(this.selectedNodes)};
            if (nodes.includes(bh.errorSource)) {
                ${snip}
            }   
            return false;`;
        } else {
            /*If user selects all nodes the nodes connected to catch node must be excluded from catching it again. */
            snip = `
            const catchConnectedNodes = ${JSON.stringify(this.ignoreList)}
            if (catchConnectedNodes.includes(bh.errorSource)) {
                return false;
            }
            ${snip}`;
		}
		const nodeSnippet = `async ${this.functionName}(bh) {
			${snip}
		}`; 
        return ({
			nodeSnippet,
			noWrap: true 
		});
    }

    getCallTemplate() {
        return `|| await this.${this.functionName}(bh) `;
    }

};
let Variable = require('./utils/Variable');
let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;

module.exports = class CallService extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_call_service", "CallService");
        this.callService = constructorOptions.callService;
        this.startName = constructorOptions.startName;
        this.inputParams = constructorOptions.inputParams;
        this.outputMapping = constructorOptions.outputMapping;
		this.accept_bh = constructorOptions.accept_bh;
		this.z = constructorOptions.z;
		this.callingServiceObj = constructorOptions.service;
        this.viewType = 'common';
    }

    get callService() {
        return this._callService;
    }
    set callService(callService) {
        this._callService = callService;
    }

    set startName(startName) {
        this._startName = startName;
    }
    get startName() {
        return this._startName;
    }

    set inputParams(inputParams) {
        this._inputParams = inputParams;
    }
    get inputParams() {
        return this._inputParams;
    }

    set outputMapping(outputMapping) {
        this._outputMapping = outputMapping;
    }
    get outputMapping() {
        return this._outputMapping;
    }

    generateSnippet(serviceType, serviceClassTemplate) {
        let outputVariables = this.accept_bh ? 'bh' : 'let outputVariables';
        let callScript = '';
        if (serviceType === BaseComponent.viewTypes.SERVER) {
            // if it is the same service
            if (this.z === this.callingServiceObj.id) {
                callScript = `${outputVariables} = await this.${this.startName}(${this.__formatInputParams()});`;
            } else {
                // calling other server side service
                let methodXpath = `${this.callingServiceObj.id}.${this.callingServiceObj.label}`;
                callScript = `const ${this.callingServiceObj.id}Instance: ${methodXpath} = ${methodXpath}.getInstance();
                              ${outputVariables} = await ${this.callingServiceObj.id}Instance.${this.startName}(${this.__formatInputParams()})\n`;
            }
        } else {
            // Client side Service
            let serviceName = this.callingServiceObj?.id;
            let methodXpath = `${serviceName}.${this.startName}`;
            
            if (this.z === this.callingServiceObj?.id) {
                methodXpath = `${this.startName}`;
            }
            callScript = `${outputVariables} = await this.${methodXpath}(${this.__formatInputParams()});\n`;
        }
        let outputMapping = this.__formatOutputMapping();

        return callScript + outputMapping;
    }

    generateImports(rootPaths) {
        let serviceName = '';
        if (typeof this.callService === 'string') {
            serviceName = this.callService.split('/');
            serviceName = serviceName[serviceName.length - 1];
        }
        if (this.callService !== this.serviceName && this.z !== this.callingServiceObj?.id) {
            return [
                {
                    library: this.callService,
                    alias: this.callingServiceObj?.id
                }
            ];
        } else {
            return [];
        }
    }

    updateTemplate(serviceClassTemplate, serviceType) {
        if (this.z !== this.callingServiceObj?.id && serviceType === BaseComponent.viewTypes.CLIENT) {
            let constructorInit = 'constructor(';
            const injectStr = `private ${this.callingServiceObj?.id} : ${this.callingServiceObj?.id + '.' + this.callingServiceObj?.label}`;
            let injectionArr = this.getAllInjections(serviceClassTemplate);
            if (injectionArr && !injectionArr.includes(injectStr)) {
                constructorInit = `constructor(${injectStr},`;
            }
            serviceClassTemplate = serviceClassTemplate.replace("constructor(", constructorInit);
        }
        return serviceClassTemplate;
    }

    getAllInjections(serviceClassTemplate) {
        let regx = new RegExp('constructor\(.*\)');
        if (typeof serviceClassTemplate === 'string') {
            let ms = serviceClassTemplate.match(regx);
            if (ms && ms.length) {
                let m = ms[0];
                return m.replace('constructor(', '').replace(')', '').split(',').map(v => v.trim());
            }
        }
        return null;
    }

    __formatInputParams() {
        let formattedParams = "";
        if (this.inputParams instanceof Array) {
            for (let i = 0; i < this.inputParams.length; i++) {
                formattedParams += `${this.inputParams[i] || 'null'},`;
            }
            formattedParams = formattedParams.substring(0, formattedParams.length - 1);
        }
        return formattedParams;
    }

    __formatOutputMapping() {
        let outputMappingString = "";
        if (this.outputMapping instanceof Array) {
            for (let i = 0; i < this.outputMapping.length; i++) {
                if(this.outputMapping[i].localVar){
                    outputMappingString += `${this.outputMapping[i].localVar} = outputVariables.${this.outputMapping[i].mapVarType}.${this.outputMapping[i].mapVarName};\n`;
                }
            }
        }
        return outputMappingString;
    }
};
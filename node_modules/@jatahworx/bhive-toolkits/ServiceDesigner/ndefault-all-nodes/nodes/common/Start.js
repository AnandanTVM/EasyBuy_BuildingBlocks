let Variable = require('./utils/Variable');
let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;

module.exports = class Start extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_start", "Start");
        this.viewType = 'common';
        this.nodeType = BaseComponent.nodeTypes.START;
        this.constructorOptions = constructorOptions;
    }

    init() {
        this.serviceName = this.constructorOptions.serviceName;
        this.inputVariables = this.__transformVariableArray(this.constructorOptions.inputVariables);
        this.localVariables = this.__transformVariableArray(this.constructorOptions.localVariables);
        this.accept_bh = this.constructorOptions.accept_bh;
        this.inputOut = '';
        this.localOut = '';
    }

    get serviceName() {
        return this._serviceName;
    }
    set serviceName(serviceName) {
        this._serviceName = serviceName;
    }

    set functionName(functionName) {
        this._functionName = functionName;
    }
    get functionName() {
        return this._functionName;
    }

    set inputVariables(inputVariables) {
        this._inputVariables = inputVariables;
    }
    get inputVariables() {
        return this._inputVariables;
    }

    set localVariables(localVariables) {
        this._localVariables = localVariables;
    }
    get localVariables() {
        return this._localVariables;
	}
	
	set bhInputs(inputStr) {
		this._bhInputStr = inputStr;
	}

	set bhLocals(localString) {
		this._bhLocalStr = localString;
	}

	get bhInputs() {
		return this._bhInputStr;
	}

	get bhLocals() {
		return this._bhLocalStr;
	}

    __transformVariableArray(variableArray) {
        let newArray = [];
        if (variableArray != null && variableArray instanceof Array) {
            for (let i = 0; i < variableArray.length; i++) {
                newArray.push(new Variable(variableArray[i]))
            }
        }
        return newArray;
    }

    constructbh() {
        return !this.accept_bh ? `bh = this.sdService.__constructDefault(bh)` : '';
    }

    get outputVariables() {
        let outputVariables = '';
        if (!this.accept_bh) {
			outputVariables = `
			// formatting output variables
			{
				input : {
					${this.inputOut}
                },
                local : {
					${this.localOut}
                }
			}`;
        } else {
            outputVariables = 'bh';
        }
        return outputVariables;
    }

    generateSnippet() {
        this.init();
		const argsSnippet = this.formatInput(); this.formatLocal();
		// initialize bh
		let nodeSnippet = `${this.bhInitializationSnippet}
		${this.constructbh()}`;

		// format output and write to file
		const returnSnippet = this.outputVariables;
		return ({
			argsSnippet,
			nodeSnippet,
			returnSnippet
		});
    }

    formatInput() {
        let inputString = '';
        let bhInputString = '';
        if (!this.accept_bh) {
            if (this.inputVariables && this.inputVariables.length) {
                for (let i = 0; i < this.inputVariables.length; i++) {
                    if (this.inputVariables[i].type == 'any') {
                        inputString += this.inputVariables[i]._key + ": any" + " = " + this.inputVariables[i]._defaultValue + ",";
                    } else {
                        inputString += this.inputVariables[i]._key + " = " + this.inputVariables[i]._defaultValue + ",";
                    }
                    bhInputString += this.inputVariables[i]._key + " : " + this.inputVariables[i]._key + ",";

                    if (this.inputVariables[i]._output) {
                        this.inputOut += this.inputVariables[i]._key + " : bh.input." + this.inputVariables[i]._key + ",";
                    }
                }
            }
            inputString += "...others";
        } else if (this.accept_bh) {
            inputString = 'bh';
		}
		this.bhInputs = bhInputString;
        return inputString;
    }

    formatLocal() {
        let bhLocalString = "";
        if (!this.accept_bh && this.localVariables && this.localVariables.length) {
            for (let i = 0; i < this.localVariables.length; i++) {
                bhLocalString += this.localVariables[i]._key + " : " + this.localVariables[i]._defaultValue + ",";
                if (this.localVariables[i]._output) {
                    this.localOut += this.localVariables[i]._key + " : bh.local." + this.localVariables[i]._key + ",";
                }
            }
		}
		this.bhLocals = bhLocalString;
	}
	
	get bhInitializationSnippet() {
		return !this.accept_bh ?
			`var bh = { 
				input: {
					${this.bhInputs}
				}, 
				local: {
					${this.bhLocals} 
				}
			}` : '';
	}
};

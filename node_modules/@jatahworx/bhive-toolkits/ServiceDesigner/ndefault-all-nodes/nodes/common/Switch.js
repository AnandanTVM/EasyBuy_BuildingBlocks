const BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
const Condition = require('../client/Condition');

module.exports = class Switch extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_switch", "Switch", true, true);
		this.constructorOptions = constructorOptions;
    }

    get functionName() {
        return this._functionName;
    }

    set functionName(functionName) {
        this._functionName = functionName;
    }


    __transformConditionRules(rules) {
        let conditions = [];
        const elseIndex = rules.findIndex(rule => rule.t === 'else');
        if (elseIndex > -1) {
            this.elseFlag = 'otherwiseFlag';
            this.otherwise = { rule: rules[elseIndex], nodes: this.connectedNodesMatrix[elseIndex] };
        }
        for (let i = 0; i < rules.length; i++) {
            if (rules[i].t !== 'else') {
                conditions.push(new Condition(rules[i], this.connectedNodesMatrix[i], this.elseFlag));
            }
        }
        return conditions;
    }

    get property() {
        return this._property;
    }

    set property(property) {
        this._property = property;
    }

    get conditions() {
        return this._conditions;
    }

    set conditions(conditions) {
        this._conditions = conditions;
    }

    get template() {
        let template = '// Append new condition';
        return template;
	}
	
	init() {
		this.property = this.constructorOptions.propertyGv;
        this.elseFlag = '';
		this.conditions = this.__transformConditionRules((this.constructorOptions.rules || []));
		this.checkall = this.constructorOptions.checkall !== 'false';
	}

    generateSnippet() {
		this.init();
        let template = this.template;
        if (this.property) {
            let conditionSting = `${this.elseFlag ? 'let ' + this.elseFlag + ' = true;' : ''}`;
            if (this.conditions.length) {
                // Generate conditions
                for (let i = 0; i < this.conditions.length; i++) {
                    const condition = this.conditions[i];

                    if (i == 0 || this.checkall) {
                        conditionSting += condition.generateSnippet(this.property);
                    }
                    else {
                        conditionSting += `else ${condition.generateSnippet(this.property)}`;
                    }
                }
                if (this.otherwise) {
                    conditionSting += (new Condition(this.otherwise.rule, this.otherwise.nodes, this.elseFlag)).generateSnippet(this.elseFlag);
                }
            }
            template = template.replace('// Append new condition', conditionSting);
            return ({
				nodeSnippet: template,
				appendNextNodePlaceholder: false
			});
        }
    }


};

let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
const SRDCodeGenUtil = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;

module.exports = class ServiceVariables extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_serviceVariables", "ServiceVariables");

        this.globalVariables = constructorOptions.globalVariables;
        this.operation = constructorOptions.operation;
        this.viewType = BaseComponent.viewTypes.COMMON;
    }

	declareVariables() {
		/**
		 * Data from the UI => Array<{ textIp: x.textIp, typedIpValue: x.typedIpValue }>
		 */
		return this.globalVariables.map(({ textIp: name }) => ({ name }));
	}

    generateSnippet(serviceClassTemplate) {
        let getSVSnippetRtn = this.getSVSnippet(serviceClassTemplate);
        return getSVSnippetRtn;
    }

	getSVSnippet() {
		let snippet = '';
		const codegenUtil = new SRDCodeGenUtil();
		if (this.operation === 'get') {
			this.globalVariables.forEach(x => {
				const genVal = codegenUtil.getValueFromTypedInput(x.typedIpValue);
				snippet += `${genVal && genVal !== '""' ? genVal + '=' : ''}this.${x.textIp};`;
			});
		} else {
			this.globalVariables.forEach(x => {
				const genVal = codegenUtil.getValueFromTypedInput(x.typedIpValue);
				snippet += `this.${x.textIp}${genVal && genVal !== '""' ? '=' + genVal : ''};`;
			});
		}
		return snippet;
	}
};
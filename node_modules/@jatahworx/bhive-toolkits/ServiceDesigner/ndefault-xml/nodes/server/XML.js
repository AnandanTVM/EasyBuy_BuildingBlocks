let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let SRDCodeGenUtil = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;

module.exports = class XML extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_XML", "XML");
        let srdUtil = new SRDCodeGenUtil();
        let r = srdUtil.getTypedInputValues(constructorOptions);

        if (constructorOptions.inputMapping) {
            this.value = r.inputMapping;
        }
        this.switch = constructorOptions.switch;// boolean - indicates if the original value needs to be switched. if false, resultMapping is set   
        if (constructorOptions.parseoptions) {
            this.parserOptions = r.parseoptions;
        } else {
            this.parserOptions = 'null';
        }
        if (constructorOptions.attrkey) {
            this.attrkey = constructorOptions.attrkey;
        }
        if (constructorOptions.charkey) {
            this.charkey = constructorOptions.charkey;
        }
        if (constructorOptions.resultMapping) {
            this.resultMapping = r.resultMapping;
        }
        this.viewType = 'server';
    }

    generateImports(rootPaths) {
        return [
            {
                library: rootPaths.pathToUtilsRoot + '/ndefault-xml/XML/XMLService',
                modules: ['XMLService']
            }
        ]
    }

    __setParsedValue(){
        let mappingCode = "";
        if(this.switch){
            mappingCode = `${this.value} = parsedValue;`
        } else{
            mappingCode = `${this.resultMapping} = parsedValue;`
        }

        return mappingCode;
    }

    generateSnippet() {
        return `let parsedValue = await XMLService.getInstance().xml(${this.value},${this.parserOptions}, "${this.attrkey}", "${this.charkey}");
			${this.__setParsedValue()}`;
    }
}
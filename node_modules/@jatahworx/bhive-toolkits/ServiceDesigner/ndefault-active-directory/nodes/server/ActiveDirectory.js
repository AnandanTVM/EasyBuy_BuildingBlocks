let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let SRDCodeGenUtil = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;
// TODO: @paulthomas0 check if find and getRootDSE functions need to exposed
module.exports = class ActiveDirectory extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_ActiveDirectory", "ActiveDirectory");
    let srdUtil = new SRDCodeGenUtil();
        let r = srdUtil.getTypedInputValues(constructorOptions);

        if (constructorOptions.resultMapping) {
            this.resultMapping = r.resultMapping;
        }


        this.adConfigId = constructorOptions.adconfig;

        // authenticate | isUserMemberOf | find | findUser | findGroup | findUsers | findGroups | groupExists
        // userExists | getGroupMembershipForGroup | getGroupMembershipForUser | getUsersForGroup | getRootDSE | findDeletedObjects
        this.operationType = constructorOptions.operationType;

        switch (this.operationType) {
            case 'authenticate':
                this.username = r.username;
                this.password = r.password;
                this.sAMAAccountName = r.sAMAAccountName;
                break;
            case 'isUserMemberOf':
                this.username = r.username;
                this.groupName = r.groupName;
                break;
            case 'findUser':
            case 'getGroupMembershipForUser':
                this.sAMAAccountName = r.sAMAAccountName;
                break;
            case 'findGroup':
            case 'groupExists':
            case 'getGroupMembershipForGroup':
            case 'getUsersForGroup':
                this.groupName = r.groupName;
                break;
            case 'findUsers':
            case 'findGroups':
            // case 'find':
                this.query = r.query;
                // this.groupName = r.groupName;
                break;
            case 'userExists':
                this.username = r.username;
                break;
            case 'findDeletedObjects':
                this.options = r.options;
                break;
        }

        this.errorMapping = r.errorMapping;
        this.viewType = 'server';
    }

    /**
     * returns Array of {
     *  libraryName: string,
     *  modules: [string],
     *  alias: string
     * }
     */
    generateImports(rootPaths) {
        return [{
            library: rootPaths.pathToUtilsRoot + '/ndefault-active-directory/ActiveDirectory/ActiveDirectoryAuthService',
            modules: ['ActiveDirectoryAuthService']
        }];
    }

    generateSnippet() {
        let methodCall = '';
        this.activeDirectoryIdCheck();
        switch (this.operationType) {
            case 'authenticate':
                if (!this.username || !this.password || !this.sAMAAccountName) {
                    throw new Error('AD operation authenticate requires username, password and sAMAAccountName')
                }
                methodCall = `await ad.authenticate(${this.adConfig}, ${this.username}, ${this.sAMAAccountName}, ${this.password});`;
                break;
            case 'isUserMemberOf':
                if (!this.username || !this.groupName) {
                    throw new Error('AD operation isUserMemberOf requires username and groupName');
                }
                methodCall = `await ad.isUserMemberOf(${this.adConfig}, ${this.username}, ${this.groupName});`;
                break;
            case 'findUser':
            case 'getGroupMembershipForUser':
                if (!this.sAMAAccountName) {
                    throw new Error('AD operation ' + this.operationType + ' requires sAMAAccountName');
                }
                methodCall = `await ad.${this.operationType}(${this.adConfig}, ${this.sAMAAccountName});`;
                break;
            case 'findGroup':
            case 'groupExists':
            case 'getGroupMembershipForGroup':
            case 'getUsersForGroup':
                if (!this.groupName) {
                    throw new Error('AD operation ' + this.operationType + ' requires groupName');
                }
                methodCall = `await ad.${this.operationType}(${this.adConfig}, ${this.groupName});`;
                break;
            case 'findUsers':
            case 'findGroups':
            case 'find':
                if (!this.query) {
                    throw new Error('AD operation ' + this.operationType + ' requires query');
                }
                methodCall = `await ad.${this.operationType}(${this.adConfig}, ${this.query});`;
                break;
            case 'userExists':
                if (!this.username) {
                    throw new Error('AD operation ' + this.operationType + ' requires username');
                }
                methodCall = `await ad.${this.operationType}(${this.adConfig}, ${this.username});`;
                break;
            case 'findDeletedObjects':
                if (!this.options) {
                    throw new Error('AD operation ' + this.operationType + ' requires findDeletedObjects query');
                }
                methodCall = `await ad.findDeletedObjects(${this.adConfig}, ${this.options});`;
                break;

        }
		const snippet = `if (${this.adConfig}) {
				let ad = new ActiveDirectoryAuthService();
				${this.resultMapping} = ${methodCall}
			} else {
				throw new Error('AD config is missing');
			}`;
		return snippet;
    }

    activeDirectoryIdCheck() {
        if (!this.adConfigId) {
            throw new Error('Invalid AD configuration. Missing valid AD config selection');
        }
    }

    set adConfigId(configId) {
        if (configId) {
            this._adConfigId = configId
        }
        else {
            this._adConfigId = null;
        }
    }

    get adConfigId() {
        return this._adConfigId;
    }

    get adConfig() {
        if (this.adConfigId) {
            return `this.sdService.getConfigObj('ad-config','${this.adConfigId}')`;
        }
        else {
            return `undefined`
        }
    }

    get error() {
        let e = 'throw e;';
        if (this.errorMapping && this.errorMapping.status && this.errorMapping.send) {
            e = 'bh.web.next({ status: ' + this.errorMapping.status + ', send: ' + this.errorMapping.send + ' })';
        }
        return e;
    }
}

let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let statusCodes = require('http-status-codes');
let SRDCodeGenUtil = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;


module.exports = class Session extends BaseComponent {
    constructor(constructorOptions) {
        super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_Session", "Session");

        this.viewType = BaseComponent.viewTypes.SERVER;
        this.srdUtil = new SRDCodeGenUtil();

        // express-session options
        // operationType
        this.operationType = constructorOptions.operationType;

        this.dataMapping = constructorOptions.dataMapping;
        this.data = constructorOptions.data;

        this.resultMapping = constructorOptions.resultMapping;
        this.errorMapping = constructorOptions.errorMapping;

        if (this.errorMapping && this.errorMapping.status) {
            let statuses = Object.values(statusCodes);
            if (!statuses.includes(this.errorMapping.status)) {
                throw new Error('Response status is not a valid status number.');
            }
        }
    }


    generateSnippet() {
		let destroySnippet = `let requestObject = bh.web.req;
			if (requestObject.session) {
				let p = function () {
					return new Promise((resolve, reject) => {
						requestObject.session.destroy(function(error) {
							if (error) {
								return reject(error);
							}
							return resolve();
						})
					});
				}
				await p();
			}`;


        let updateSnippet = `let requestObject = bh.web.req;
            if (requestObject.session) {
                requestObject.session.data = ${this.dataMapping};
            }`;

         let getSessionSnippet = `let requestObject = bh.web.req;
			if (requestObject.session) {
				${this.resultMapping} = JSON.parse(JSON.stringify(requestObject.session));
			}
         `;

         let returnSnippet = '';
         switch(this.operationType) {
             case 'destroy':
                returnSnippet = destroySnippet;
                break;
             case 'update':
                 returnSnippet = updateSnippet;
                 break;
             case 'get':
                 returnSnippet = getSessionSnippet;
                 break;
         }

        return returnSnippet;
    }


    get error() {
        let e = 'throw e;';
        if (this.errorMapping && this.errorMapping.status && this.errorMapping.send) {
            e = 'bh.web.next({ status: ' + this.errorMapping.status + ', send: ' + this.errorMapping.send + ' })';  
        }
        return e;
    }
}

let BaseComponent = require("@jatahworx/bhive-toolkits").BaseComponent;
let util = require("@jatahworx/bhive-toolkits").SRDCodeGenUtil;
let DBManager = require('./util/DBManager');
module.exports = class ExecuteSql extends BaseComponent {
  constructor(constructorOptions) {
    super(constructorOptions.id, constructorOptions.name, "neutrinos_service_designer_execute_sql", "ExecuteSql");
    this.nodeID = constructorOptions.id;
    this.nodeOptions = constructorOptions;
    this.viewType = 'server';
    this.dbType =  constructorOptions.dbType || 'mssql';
  }

  init(options) {
    this.getValueFromTypedInput = (new util()).getValueFromTypedInput;
    if (!options.databaseConfig) {
      throw new Error('Invalid database config')
    }
    if (!options.singleQuery) {
      throw new Error('Invalid query')
    }
    this.configId = options.databaseConfig;
    this.query = options.singleQuery;
    this.params = options.paramMappingObj || options.params;
    this.resultMapping = options.resultMap;
  }

  generateImports(rootPaths) {
    return [
      {
        library: rootPaths.pathToUtilsRoot + '/ndefault-sql/ExecuteSql/GenericRDBMSOperations',
        modules: [
          "GenericRDBMSOperations"
        ]
      }
    ]
  }

  generateSnippet() {
    this.init(this.nodeOptions);
	return `${this.connectionName};
		let  params = ${this.params}
		params = params ? params : [];
		${this.resultMapping} = await new GenericRDBMSOperations().executeSQL(connectionName, ${this.query}, params);`;
  }

  /**
     * reutrn [{name: '', version: ''}]
  */
  updatePackageJSON() {
    let npmSqlModule = DBManager.getPackageDetails(this.dbType);
    return [npmSqlModule];
  }

  get functionName() {
    return this._functionName;
  }

  set functionName(functionName) {
    this._functionName = functionName;
  }

  set query(queryObj) {
    this._query = this.getValueFromTypedInput(queryObj);
  }

  get query() {
    return this._query;
  }

  set configId(configId) {
    this._configId = configId;
  }


  get configId() {
    return this._configId;
  }

  set params(params) {
    if (params && params.hasOwnProperty('type') && params.hasOwnProperty('value') && params.value.length) {
      this._params = this.getValueFromTypedInput(params)
    } else if (Array.isArray(params)) {
      this._params =  JSON.stringify(params);
    } else {
      this._params = undefined;
    }
  }

  get params() {
    return this._params;
  }

  set resultMapping(resultMapObj) {
    this._result = this.getValueFromTypedInput(resultMapObj);
  }

  get resultMapping() {
    return this._result;
  }

  get connectionName() {
    return `let configObj = this.sdService.getConfigObj( 'db-config','${this.configId}') 
    let connectionName;
    if (configObj && configObj.hasOwnProperty('dbOption') && configObj.dbOption.hasOwnProperty('name')) {
        connectionName = configObj.dbOption.name;
    } else {
        throw new Error('Cannot find the selected config name')
    }
      `
  }


}
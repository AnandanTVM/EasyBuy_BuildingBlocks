let BaseComponent = require('@jatahworx/bhive-toolkits').BaseComponent;

module.exports = class SQLOnStart extends BaseComponent {
    generateImports(rootPaths) {
        return [
          {
              library: './entity/ndefault-session/Session/Session',
              modules: [
                  'sessionObject'
              ]
          },
          {
              library: './utils/ndefault-sql/ExecuteSql/LoggerTypeorm',
              modules: [
                  'LoggerTypeorm'
              ]
          },
          {
              library: './utils/Logger',
              alias: 'log'
          },
          {
              library: 'typeorm',
              modules: [
                  'createConnections'
              ]
          }
        ];
      }
    
      generateSnippet() {
          return `
            function isDBDisabled(flag) {
                return typeof flag === 'boolean' && flag;
            }
            const dbConfig = configNodes.default["db-config"];
            if (dbConfig) {
                const dbConfigsList = Object.keys(dbConfig);
                let ormConfig: any[] = [];
                for (let i = 0; i < dbConfigsList.length; i++) {
                    if (dbConfig[dbConfigsList[i]] && !isDBDisabled(dbConfig[dbConfigsList[i]].disabledb) && dbConfig[dbConfigsList[i]].dbOption) {
                        let dbOption = dbConfig[dbConfigsList[i]].dbOption;
                        if (dbOption.type != 'mongodb') {
                            if (typeof dbOption.port === 'string') {
                                dbOption.port = parseInt(dbOption.port);
                            }
                            dbOption.entities = sessionObject[dbOption.type];
                            dbOption.logger = new LoggerTypeorm(log.default);
                            ormConfig.push(dbOption);
                        }
                    }
                }
                const connection = await createConnections(ormConfig);
                // to freez the mongo config object
                //  monogConnections.freezConnectionObj();
            }
          `;
      }
    
};

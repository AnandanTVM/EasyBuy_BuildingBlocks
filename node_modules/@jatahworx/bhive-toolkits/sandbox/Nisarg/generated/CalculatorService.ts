/*DEFAULT GENERATED TEMPLATE. DO NOT CHANGE CLASS NAME*/
import { Injectable } from "@angular/core"
import { HttpClient } from "@angular/common/http"
import { Resolve, ActivatedRouteSnapshot } from "@angular/router"
import { NSystemService } from "neutrinos-seed-services"
import { MatSnackBar } from "@angular/material"

declare const window: any
declare const cordova: any

@Injectable()
export class CalculatorService {
  systemService = NSystemService.getInstance()
  appProperties

  constructor(private http: HttpClient) {
    this.appProperties = this.systemService.getVal("properties")
  }

  //   service flows_CalculatorService

  public async multiply(number1 = 50, number2 = 5, ...others) {
    try {
      let bh = {
        input: { number1: number1, number2: number2 },
        local: { mul: null, sub: null }
      }
      bh = await this.script_scriptMultiply(bh)
      bh = await this.switch_checkAge(bh)

      //appendnew_next_multiply
      //Start formatting output variables
      let outputVariables = {
        input: { number1: bh.input.number1 },
        local: { mul: bh.local.mul, sub: bh.local.sub }
      }
      //End formatting output variables
      return outputVariables
    } catch (e) {
      throw e
    }
  }
  //appendnew_flow_CalculatorService

  async script_scriptMultiply(bh) {
    try {
      bh.local.mul = bh.input.number1 * bh.input.number2
      return bh
    } catch (e) {
      throw e
    }
  }

  async switch_checkAge(bh) {
    try {
      if (eq(bh.local.age, 10, undefined, undefined)) {
        bh = await this.script_scriptMultiply(bh)
        bh = await this.switch_checkGender(bh)
        //appendnew_next_checkAge_0
      } else if (eq(bh.local.age, bh.input.number2, undefined, undefined)) {
        bh = await this.script_scriptSubtract(bh)
        bh = await this.script_scriptMultiply(bh)
        //appendnew_next_checkAge_1
      } else if (neq(bh.local.age, "female", undefined, undefined)) {
        bh = await this.script_scriptSubtract(bh)
        //appendnew_next_checkAge_2
      }

      return bh
    } catch (e) {
      throw e
    }
  }

  async switch_checkGender(bh) {
    try {
      if (neq(bh.local.gender, "female", undefined, undefined)) {
        bh = await this.script_scriptSubtract(bh)
        //appendnew_next_checkGender_0
      }

      return bh
    } catch (e) {
      throw e
    }
  }

  async script_scriptSubtract(bh) {
    try {
      bh.local.sub = bh.input.number1 - bh.input.number2
      return bh
    } catch (e) {
      throw e
    }
  }

  //appendnew_node
}

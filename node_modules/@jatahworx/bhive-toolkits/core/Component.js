"use strict";
let BGuid = require('../util/BGuid');
let Attribute = require('./Attributes');

module.exports = class Component {
    constructor(compProp) {
        if (Object.keys(compProp).length < 5) throw new Error("One or more of the arguments are missing");
        if ((typeof compProp.name !== "string") ||
            (typeof compProp.designerTemplate !== "string") ||
            (typeof compProp.paletteTemplate !== "string") ||
            (typeof compProp.templateUrl !== "string")) {
            throw new Error(`Invalid arguments. 
                name, designerTemplate, paletteTemplate, templateUrl should be of type "string"`);
        }
        this.name = compProp.name;
        this.guid = new BGuid().generate();
        this.designerTemplate = compProp.designerTemplate;
        this.paletteTemplate = compProp.paletteTemplate;
        this.templateUrl = compProp.templateUrl;
        this.componentLabel = compProp.componentLabel ? compProp.componentLabel : '';
        this.htmlAttributes = [];
        this.dav = {};
        if (!compProp.hasOwnProperty('addDefaultAttr') || (compProp.hasOwnProperty('addDefaultAttr') && compProp.addDefaultAttr)) {
            this.__setDefaultAttributes();
        }
        if (typeof compProp.visible === 'boolean') {
            this.visible = compProp.visible;
        }

    }

    __setDefaultAttributes() {
        let defaultAttributes = [];
        let attrStyle = new Attribute({
            key: 'style',
            value: '',
            type: 'kv'
        });
        defaultAttributes.push(attrStyle);

        let attrClass = new Attribute({
            key: 'class',
            value: '',
            type: 'dav',
            templateUpdater: {
                postSave: (value, x, componentAttributes) => {
                    if (value) {
                        if (Array.isArray(value) && value.length) {
                            return `class="${value.filter(v => typeof v === 'string').join(' ')}"`;
                        }
                    }
                    return '';
                }
            }
        });
        defaultAttributes.push(attrClass);

        // Calling addAttribute for each of the defaultAttributes to populate all the required structures
        defaultAttributes.forEach(attrObj => this.addAttribute(attrObj));
    }

    addAttribute(attribute) {
        if (!attribute || !(attribute instanceof Attribute)) {
            throw new Error("Not an instance of Attribute");
        }
        if (attribute.type === 'dav') {
            this.dav[attribute.key] = attribute._templateUpdater;
            delete attribute._templateUpdater;
        }
        this.htmlAttributes.push(attribute);
    }

    
    setType(type) {
        if (!type)
            throw new Error("Invalid Arguments");
        this.type = type;
    }

    static get COMPONENT_TYPE_TITLES() {
        return {
            "LAYOUT": {
                "val": 1,
                "title": "Layout"
            },
            "NG_CHARTS": {
                "val": 2,
                "title": "Ng Charts"
            },
            "NGX_CHARTS": {
                "val": 3,
                "title": "Ngx Charts"
            },
            "FORM_CONTROLS": {
                "val": 4,
                "title": "Form Controls"
            },
            "NAVIGATION": {
                "val": 5,
                "title": "Navigation"
            },
            "OTHERS": {
                "val": 6,
                "title": "Others"
            },
            "VIEWS": {
                "val": 7,
                "title": "Views"
            }
        };
    }

    initializeAttributes(htmlAttributes) {
        // if attributes list is sent then map those attributes
        if (htmlAttributes && htmlAttributes.length > 0) {
            htmlAttributes.map((advancedAttr) => {
                const i = this.htmlAttributes.findIndex(attr => {
                    return attr._key === advancedAttr._key;
                });
                if (i > -1) {
                    this.htmlAttributes[i] = advancedAttr;
                }
            })
        }
    }

    getHtmlAttributes(allAttributes) {
        const componentHtmlAttribute = {};
        if (allAttributes instanceof Array) {
            var reformattedAttributes = allAttributes.map(attributes => {
                componentHtmlAttribute[attributes._key] = attributes;
            });
        }
        return componentHtmlAttribute;
    }
}
let path = require('path');

// base node component
module.exports = class BaseComponent {
    constructor(id, name, type, paletteName, showInPalette = true, usesConnectedNodes = false){
        this.name = name;
        this.id = id;
        this.type = type;
        this.wires = [];
        this.xPos = 0;
        this.yPos = 0;
        this.paletteName = paletteName;
		this.showInPalette = showInPalette;
		this.usesConnectedNodes = usesConnectedNodes;
        // client / server / common(default)
        this.viewType = 'common';
        this.nodeType = BaseComponent.nodeTypes.FLOW;
    }

    static get viewTypes () {
        return {
            COMMON: 'common',
            SERVER: 'server',
            CLIENT: 'client',
            MIDDLEWARE: 'middleware'
        }
    }

    static get nodeTypes() {
        return {
            START: 'start',
            MIDDLEWARE: 'middleware',
            FLOW: 'flow'
        }
    }

    get nodeType() {
        return this.__nodeType;
    }
    set nodeType(nodeType) {
        this.__nodeType = nodeType;
    }

    get viewType(){
        return this.__viewType;
    }

    set viewType(viewType){
        this.__viewType = viewType;
    }

    get viewHTML(){
        // relative to /ServiceDesigner/
        return `views${path.sep}${this.viewType}${path.sep}${this.paletteName}.html`;
    }

    get showInPalette(){
        return this._showInPalette
    }

    set showInPalette(showInPalette){
        this._showInPalette = showInPalette;
    }

    get paletteName(){
        return this._paletteName;
    }

    set paletteName(paletteName){
        this._paletteName = paletteName;
    }
    get xPos(){
        return this._xPos;
    }

    set xPos(xPos){
        this._xPos = xPos;
    }

    get yPos(){
        return this._yPos;
    }

    set yPos(yPos){
        this._yPos = yPos;
    }

    get wires(){
        return this._wires;
    }

    set wires(wires){
        if(wires instanceof Array){
            this._wires = wires;
        }
        else{
            throw new Error("wires must be an instace of array");
        }
    }

    addWire(targetId){
        if(targetId){
            this._wires.push(targetId);
        }
    }

    set type(type){
        this._type = type;
    }

    get type(){
       return this._type;
    }

    set name(name){
        this._name = name;
    }

    get name(){
        return this._name;
    }

    set id(id){
        this._id = id;
    }

    get id(){
        return this._id;
    }

	set connectedNodesMatrix(nodes) {
		if(Array.isArray(nodes)) {
			this.__directlyConnectedNodes = nodes;
		} else {
			this.__directlyConnectedNodes = [];
		}
	}

	get connectedNodesMatrix() {
		return this.__directlyConnectedNodes;
	}

    /**
	 * @param {RootPaths} RootPaths
     * @returns {ImportConfig[]} ImportsConfig
     */
    generateImports({depth, pathToUtilsRoot, pathToServiceRoot}) {
        return [];
	}
	
	/**
	 * @returns {Array<ServiceVariable>}
	 */
	declareVariables() {
		console.log(this.name, "Base Class declare variable called.. returning empty array");
		return [];
	}

    generateSnippet(serviceType, serviceClassTemplate){
        console.log(this.name, "Base Class generation called.. returning empty snippet..");
        return "";
    }
    getListenerSnippet() {
		return "";
	}

    getCallTemplate(){
        console.log(this.name, "Base Class generation called.. returning empty call template..");
        return "";
    }
    
    populateConfig(configObj) {
        
    }

    /**
     * reutrn [{name: '', version: ''}]
     */
    updatePackageJSON() {
        return [];
    }

    updateTemplate(serviceClassTemplate){
        // base calss update Template. return as is;
        return serviceClassTemplate;
    }

    getErrorTemplate() {
        return `
        export class errorCheck {
                //appendnew_node
        }
        `;
    }
}

/**
 * @typedef ServiceVariable
 * @property {string} name - Name of the variable
 * @property {string} [type] - Type of the variable
 * @property {any} [value] - Initial value to assign to the variable
 */

/**
 * @typedef ImportConfig
 * @property {string} library
 * @property {string[]} [modules]
 * @property {string} [alias]
 * @property {string} [default]
 */

/**
 * @typedef RootPaths
 * @property {number} depth
 * @property {string} pathToServiceRoot
 * @property {string} pathToUtilsRoot
 */
"use strict";
let Component = require("./Component");

module.exports = class AdvancedComponent extends Component {

  /**
   * @typedef {Object} AdvancedComponentCtorOptions
   * @property {string} name
   * @property {string} [template]
   * @property {string} designerTemplate
   * @property {string} paletteTemplate
   * @property {string} componentLabel
   * @property {string} [templateUrl]
   * @property {boolean} [isAdvancedChild]
   * @property {boolean} [visible]
   */

  /**
   * @param {AdvancedComponentCtorOptions} advancedComponentOptions 
   */
  constructor(advancedComponentOptions = {
    name: '',
    template: '',
    designerTemplate: '',
    paletteTemplate: '',
    componentLabel: '',
    templateUrl: '',
    isAdvancedChild: false,
    visible: true,
    htmlAttributes: [],
    addDefaultAttr: true
  }) {
    let designerTemplate = advancedComponentOptions.designerTemplate;
    let paletteTemplate = advancedComponentOptions.paletteTemplate;
    let name = advancedComponentOptions.name;
    let componentLabel = advancedComponentOptions.componentLabel;
    let templateUrl = advancedComponentOptions.templateUrl;
    let isAdvancedChild = advancedComponentOptions.isAdvancedChild;
    let visible = advancedComponentOptions.visible;
    let addDefaultAttr = advancedComponentOptions.hasOwnProperty('addDefaultAttr') ? advancedComponentOptions.addDefaultAttr : true;
    if (typeof name !== 'string' || typeof designerTemplate !== 'string' || typeof paletteTemplate !== 'string') {
      throw new Error('Invalid arguments. name, designerTemplate, paletteTemplate should be of type string.');
    }
    if (designerTemplate.match(new RegExp('<' + name.toLowerCase())) == null) {
      throw new Error('Invalid advanced component. A advanced component\'s designerTemplate should have <palette-name> html tag.');
    }
    if (isAdvancedChild) {
      designerTemplate = designerTemplate.replace('<' + name.toLowerCase(), '<' + name.toLowerCase() + ' n-adv-child');
    } else {
      designerTemplate = designerTemplate.replace('<' + name.toLowerCase(), '<' + name.toLowerCase() + ' n-adv');
    }

    super({
      name: name, 
      designerTemplate: designerTemplate, 
      paletteTemplate: paletteTemplate, 
      componentLabel: componentLabel, 
      templateUrl: templateUrl,
      addDefaultAttr: addDefaultAttr
    });

    if (typeof visible === 'boolean') {
      this.visible = visible;
    }

    this.shared = {};
  }

  /**
   * 
   * @typedef {Object} ComposeTemplateOptions
   * @property {string} [styles]
   * @property {string} [slotsTemplate]
   * @property {() => void} [onInit]
   * @property {() => void} [onDestroy]
   * @property {Object} [customMethods]
   */
  /**
   * @param {ComposeTemplateOptions} elementProperties 
   */
  composeTemplate(elementProperties = {
    "styles": "",
    "slotsTemplate": "",
    "onInit": function () { },
    "onDestroy": function () { },
    "customMethods": {}
  }) {
    if (elementProperties.slotsTemplate && this.designerTemplate) {
      let domString = '';
      let designTemplateTag = this.designerTemplate.match(new RegExp(`<\\s*${this.name}[^>]*>`));
      let allSlotTags = elementProperties.slotsTemplate.match(new RegExp(`<\\s*slot[^>]*>`, 'g'));
      for (let i = 0; i < allSlotTags.length; i++) {
        let slotName = allSlotTags[i].match(new RegExp(`name="([A-Za-z0-9 _-]*)"`))
        if (slotName && slotName.length > 0) {
          domString += '\n<div slot-id="' + slotName[1] + '" slot="' + slotName[i] + '" tempslots></div>';
        }
      }
      this.designerTemplate = this.designerTemplate.replace(designTemplateTag, designTemplateTag + domString);
    }
    this.htmlElement = class extends HTMLElement {
      constructor() {
        super();
        let shadowRoot = this.attachShadow({
          mode: "open"
        });
        shadowRoot.innerHTML = `
                  <style>
                  ${elementProperties.styles ? elementProperties.styles : ""}
                  </style>
                  <slot></slot>
                  ${
          elementProperties.slotsTemplate
            ? elementProperties.slotsTemplate
            : ""
          }
                `;

        if (
          elementProperties.onInit &&
          typeof elementProperties.onInit == "function"
        ) {
          this.onInit = elementProperties.onInit;
        }
        if (
          elementProperties.onDestroy &&
          typeof elementProperties.onDestroy == "function"
        ) {
          this.onDestroy = elementProperties.onDestroy;
        }

        if (elementProperties.customMethods) {
          for (let property in elementProperties.customMethods) {
            if (elementProperties.customMethods.hasOwnProperty(property)) {
              // do stuff
              this[property] = elementProperties.customMethods[property];
            }
          }
        }
      }

      connectedCallback() {
        if (this.onInit) {
          this.onInit();
        }
      }

      disconnectedCallback() {
        if (this.onDestroy) {
          this.onDestroy();
        }
      }

      addChild(paletteTemplateName) {
        this.dispatchEvent(
          new CustomEvent("addChildEvent", {
            bubbles: true,
            detail: {
              "b-palette-key": paletteTemplateName
            }
          })
        );
      }

      attachSiblingBefore(paletteTemplateName) {
        this.dispatchEvent(
          new CustomEvent('addBeforeEvent', {
            bubbles: true,
            detail: {
              "b-palette-key": paletteTemplateName,
              "before": true
            }
          })
        )
      }

      attachSiblingAfter(paletteTemplateName) {
        this.dispatchEvent(
          new CustomEvent('addAfterEvent', {
            bubbles: true,
            detail: {
              "b-palette-key": paletteTemplateName,
              "after": true
            }
          })
        )
      }
    };
  }

  getShadow() {
    return this.htmlElement;
  }
};

"use strict";
let AdvancedComponent = require("../../../core/AdvancedComponent");
let Attribute = require("../../../core/Attributes");

module.exports = class advanceCard extends AdvancedComponent {
  constructor() {
    const name = "ng-card";
    const designerTemplate = `
        <ng-card onclick="click(event)" component-label="Card" class="ad-element flex-shrink-0 flex-grow-1">
          <ng-card-title n-adv-child></ng-card-title>
          <ng-card-subtitle n-adv-child></ng-card-subtitle>
          <ng-card-image n-adv-child></ng-card-image>
          <ng-card-content n-adv-child></ng-card-content>
          <ng-card-action n-adv-child></ng-card-action>
          <div  slot="add" class="ad-card-buttons">
            <div class="inline-block">
              <button id="addcardheader" class="add-child-button flex-column" no-select>Card Header</button>
              <button id="addcardtitlegroup" class="add-child-button flex-column" no-select>Card Title Group</button>
              <button id="addcardtitle" class="add-child-button flex-column" no-select>Card Title</button>
              <button id="addcardsubtitle" class="add-child-button flex-column" no-select>Card Sub-Title</button>
            </div>
            <div class="inline-block">
            <button id="addcardimage" class="add-child-button flex-column" no-select>Card Image</button>
            <button id="addcardcontent" class="add-child-button flex-column" no-select>Card Content</button>
            <button id="addcardaction" class="add-child-button flex-column" no-select>Card Action</button>
            <button id="addcardfooter" class="add-child-button flex-column" no-select>Card Footer</button>
            </div>
          </div>
        </ng-card>`;
    const paletteTemplate = "Card";
    const componentLabel = 'Card';
    const templateUrl = "articles/#!components-guide-7/card";
    super({
      name,
      template: ``,
      designerTemplate,
      paletteTemplate,
      componentLabel,
      templateUrl
    });
    super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.LAYOUT.val);
    super.addAttribute(
      new Attribute({
        key: 'tabindex',
        value: '',
        type: 'kv'
      })
    );
    super.composeTemplate({
      styles: `
      :host {
        display: flex;
        padding-top: 2em;
        padding-bottom: 1em;
        min-width: 20em;
        flex-direction: column;
        align-self: start;
      }
     .parent_card {
       display: flex;
       flex-direction: column;
    }
      `,
      slotsTemplate: `   
      <div class="parent_card">
        <slot name="cards"></slot>
      </div>
      <div class="parent_card">
        <slot id="addSlot" name="add"></slot>
      </div>
      `,
      onInit: function () {},
      onDestroy: function () {},
      customMethods: {
        click: function (e) {
          if (e.target.id === "addcardheader") {
            this.addChild("ng-cardheader");
          } else if (e.target.id === "addcardaction") {
            this.addChild("ng-card-action");
          } else if (e.target.id === "addcardcontent") {
            this.addChild("ng-card-content");
          } else if (e.target.id === "addcardimage") {
            this.addChild("ng-card-image");
          } else if (e.target.id === "addcardfooter") {
            this.addChild("ng-card-footer");
          } else if (e.target.id === "addcardtitle") {
            this.addChild("ng-card-title");
          } else if (e.target.id === "addcardsubtitle") {
            this.addChild("ng-card-subtitle");
          } else if (e.target.id === "addcardtitlegroup") {
            this.addChild("ng-card-title-group");
          }
        }
      }
    });
  }
  get template() {
    const template = `<mat-card %tabindex% %bCustomProps% %style% %class%></mat-card>`;
    return template;
  }
  set template(templateString) {}
};
"use strict";
let AdvancedComponent = require("../../core/AdvancedComponent");
let Attribute = require("../../core/Attributes");

module.exports = class Chip extends AdvancedComponent {
    constructor() {
        let componentInstance;
        const name = 'n-chip';
        const designerTemplate = `<n-chip slot="chips" class="ad-button non-dropable-comp-border form-control-chip" component-label="Chip" block-copy>
                                    <span class="component-placeholder-chip ad-select-text"></span>
                                  </n-chip>`;
        const paletteTemplate = 'Chip';
        const componentLabel = 'Chip';
        const visible = true;
        const templateUrl = 'articles/#!components-guide-7/chips';

        super({
            name,
            designerTemplate,
            componentLabel,
            paletteTemplate,
            isAdvancedChild: true,
            visible,
            templateUrl
        });
        super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.LAYOUT.val);

        super.addAttribute(
            new Attribute({
              key: 'ChipName',
              value: 'Chip',
              type: 'a',
              useAsLabel: true,
            })
        );

        super.addAttribute(
          new Attribute({
            key: 'color',
            value: '',
            type: 'kv'
          })
        );

        super.addAttribute(
          new Attribute({
            key: '*ngFor',
            value: '',
            type: 'kv'
          })
        );

        super.addAttribute(
          new Attribute({
            key: '[disableRipple]',
            value: '',
            type: 'kv'            
          })
        );

        super.addAttribute(
          new Attribute({
            key: '[disabled]',
            value: '',
            type: 'kv'
          })
        );

        super.addAttribute(
          new Attribute({
            key: '[removable]',
            value: '',
            type: 'kv'
          })
        );

        super.addAttribute(
          new Attribute({
            key: '[selectable]',
            value: '',
            type: 'kv'
          })
        );

        super.addAttribute(
          new Attribute({
            key: '[selected]',
            value: '',
            type: 'kv'
          })
        );

        super.addAttribute(
          new Attribute({
            key: '[value]',
            value: '',
            type: 'kv'
          })
        );

        super.addAttribute(
          new Attribute({
            key: '(destroyed)',
            value: '',
            type: 'kv'
          })
        );

        super.addAttribute(
          new Attribute({
            key: '(removed)',
            value: '',
            type: 'kv'
          })
        );

        
        super.addAttribute(
          new Attribute({
            key: '(selectionChange)',
            value: '',
            type: 'kv'
          })
        );
        
        super.addAttribute(
          new Attribute({
            key: 'showIconBeforeLabel',
            value: '',
            type: 'dav',
            complexity: 'advanced',
            templateUpdater: {
              valueChange: (elementValue, attribs) => {
                componentInstance = this;
                let componentAttributes = componentInstance.getHtmlAttributes(attribs);

                
                if (elementValue == "showIconBeforeLabel") {
                    componentAttributes.showIconBeforeLabel['_value'] == 'showIconBeforeLabel';
                    componentAttributes.showIconAfterLabel['_value'] == '';
                } else {
                  componentAttributes.showIconBeforeLabel['_value'] == '';
                }
                return attribs;
              }
            }
          })
        );

        super.addAttribute(
          new Attribute({
            key: 'IconBeforeLabel',
            value: 'home',
            type: 'a',
            complexity: 'advanced'
          })
        );

        super.addAttribute(
          new Attribute({
            key: 'IconBeforeLabelClass',
            value: '',
            type: 'a',
            complexity: 'advanced'
          })
        );

        super.addAttribute(
          new Attribute({
            key: 'IconBeforeLabelStyle',
            value: 'margin-right: 7px; margin-left: -2px ;',
            type: 'a',
            complexity: 'advanced'
          })
        );


        super.addAttribute(
          new Attribute({
            key: 'showIconAfterLabel',
            value: '',
            type: 'dav',
            complexity: 'advanced',
            templateUpdater: {
              valueChange: (elementValue, attribs) => {
                componentInstance = this;
                let componentAttributes = componentInstance.getHtmlAttributes(attribs);
                if (elementValue == "showIconAfterLabel") {
                    componentAttributes.showIconAfterLabel['_value'] == 'showIconAfterLabel';
                    componentAttributes.showIconBeforeLabel['_value'] == '';
                
                } else {
                  componentAttributes.showIconAfterLabel['_value'] == '';
                }
                return attribs;
              }
            }
          })
        );

        super.addAttribute(
          new Attribute({
            key: 'IconAfterLabel',
            value: 'home',
            type: 'a',
            complexity: 'advanced'
          })
        );

        super.addAttribute(
          new Attribute({
            key: 'IconAfterLabelClass',
            value: '',
            type: 'a',
            complexity: 'advanced'
          })
        );

        super.addAttribute(
          new Attribute({
            key: 'IconAfterLabelStyle',
            value: '',
            type: 'a',
            complexity: 'advanced'
          })
        );


    }

    get template() {
      let componentAttributes = this.getHtmlAttributes(this.htmlAttributes);
      let showIconBeforeLabel = componentAttributes.showIconBeforeLabel['_value'];
      let showIconAfterLabel = componentAttributes.showIconAfterLabel['_value'];
      let template = '';

      template = `
        <mat-chip 
        %style%
        %class%
        %color% 
        %*ngFor%
        %[disableRipple]% 
        %[disabled]% 
        %[selectable]% 
        %(destroyed)%
        %(removed)%
        %[selected]%
        %[value]% 
        %[removable]% 
        %(selectionChange)%
        %bCustomProps%>
          %ChipName%
        </mat-chip>
      `
      // Both IconAfterLabel and IconBeforeLabel Selected 
      if(showIconAfterLabel == "showIconAfterLabel" && showIconBeforeLabel == "showIconBeforeLabel") {
        template = `
        <mat-chip 
        %style%
        %class%
        %color% 
        %*ngFor%
        %[disableRipple]% 
        %[disabled]% 
        %[selectable]% 
        %(destroyed)%
        %(removed)%
        %[selected]%
        %[value]% 
        %[removable]% 
        %(selectionChange)%
        %bCustomProps%>
        <mat-icon class="%IconBeforeLabelClass%" style="%IconBeforeLabelStyle%" matChipRemove>%IconBeforeLabel%</mat-icon>%ChipName%<mat-icon class="%IconAfterLabelClass%" style="%IconAfterLabelStyle%" matChipRemove>%IconAfterLabel%</mat-icon>
      </mat-chip>
        `
      }

      // IconBeforeLabel Selected
      if(showIconBeforeLabel == "showIconBeforeLabel" && showIconAfterLabel != "showIconAfterLabel") {
        template = `
        <mat-chip 
        %style%
        %class%
        %color% 
        %*ngFor%
        %[disableRipple]% 
        %[disabled]% 
        %[selectable]% 
        %(destroyed)%
        %(removed)%
        %[selected]%
        %[value]% 
        %[removable]% 
        %(selectionChange)%  
        %bCustomProps%>
        <mat-icon class="%IconBeforeLabelClass%" style="%IconBeforeLabelStyle%" matChipRemove>%IconBeforeLabel%</mat-icon>%ChipName%
      </mat-chip>
        `
      }

      // IconAfterLabel Selected
      if (showIconAfterLabel == "showIconAfterLabel" && showIconBeforeLabel != "showIconBeforeLabel") {
        template = `
        <mat-chip 
        %style%
        %class%
        %color% 
        %*ngFor%
        %[disableRipple]% 
        %[disabled]% 
        %[selectable]% 
        %(destroyed)%
        %(removed)%
        %[selected]%
        %[value]% 
        %[removable]% 
        %(selectionChange)%
        %bCustomProps%>
        %ChipName%<mat-icon class="%IconAfterLabelClass%" style="%IconAfterLabelStyle%" matChipRemove>%IconAfterLabel%</mat-icon>
      </mat-chip>
        `
      }
      
      return template;
    }
    set template(templateString) { }
}
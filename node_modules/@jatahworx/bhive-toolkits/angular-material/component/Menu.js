'use strict';
let Attribute = require('../../core/Attributes');
let Component = require('../../core/Component');

module.exports = class Menu extends Component {
  constructor() {
    const name = 'NG-Menu';
    const designerTemplate = `<div class=\"drop\" component-label="Menu"></div>`;
    const paletteTemplate = 'Menu';
    const componentLabel = 'Menu';
    const templateUrl = 'articles/#!components-guide-7/menu';

    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      templateUrl: templateUrl,
      addDefaultAttr: false
    });
    super.setType(Component.COMPONENT_TYPE_TITLES.NAVIGATION.val);

    super.addAttribute(this._classAttr('class'));
    super.addAttribute(
      new Attribute({
        key: 'xPosition',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'yPosition',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'matMenu',
        value: 'menu',
        type: 'vk'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'hasBackdrop',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'overlapTrigger',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(closed)',
        value: '',
        type: 'kv'
      })
    );
  }

  get template() {
    const template = `<mat-menu %class% %bCustomProps% %xPosition% %yPosition% %matMenu% %hasBackdrop% %overlapTrigger% %(closed)%></mat-menu>`;
    return template;
  }

  set template(templateString) { }

  _classAttr(key) {
    return new Attribute({
      key: key,
      value: "",
      type: 'dav',
      templateUpdater: {
        postSave: (arr) => this._classConcatenator(key, arr)
      }
    })
  }

  _classConcatenator(key, classArray) {
    if (Array.isArray(classArray) && classArray.length) {
      return `${key}="${classArray.filter(v => typeof v === 'string').join(' ')}"`;
    }
    return '';
  }
};
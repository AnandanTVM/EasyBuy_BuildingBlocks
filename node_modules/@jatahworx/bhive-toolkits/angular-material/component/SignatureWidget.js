'use strict';
let Attribute = require('../../core/Attributes');
let Component = require('../../core/Component');

module.exports = class SideNavContainer extends Component {
  constructor() {
    const name = 'COB-signature-widget';
    const designerTemplate = `<div class=\"ad-google-map non-dropable-comp-border\" component-label="Signature Widget">
                                <div class=\"signature-widget-icon height-100\"></div>
                              </div>`;
    const paletteTemplate = 'Signature Widget';
    const componentLabel = 'Signature Widget';
    const templateUrl = 'articles/#!components-guide-7/signature-widget';
    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      templateUrl: templateUrl,
    });
    super.setType(Component.COMPONENT_TYPE_TITLES.OTHERS.val);


    super.addAttribute(
      new Attribute({
        key: '[signatureWidgetMode]',
        value: '',
        type: 'a'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[(imageData)]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(imageDataChange)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(imageDataUrl)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[backgroundColor]',
        value: "'rgb(255,255,255)'",
        type: 'kv',
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[dotSize]',
        value: "'1'",
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[minWidth]',
        value: "'0.5'",
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[maxWidth]',
        value: "'2.5'",
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[throttle]',
        value: "'16'",
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[minDistance]',
        value: "'5'",
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[penColor]',
        value: "'rgb(0,0,0)'",
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[velocityFilterWeight]',
        value: "'0.7'",
        type: 'kv',
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[onBegin]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[onEnd]',
        value: '',
        type: 'kv'
      })
    );
  }
  get template() {
    const template = `<n-signature %class% %style% %bCustomProps% %[(imageData)]% %(imageDataChange)% %(imageDataUrl)% %[backgroundColor]% [mode]=\"%[signatureWidgetMode]%\" %[dotSize]% %[minWidth]% %[maxWidth]% %[throttle]% %[minDistance]% %[penColor]% %[velocityFilterWeight]% %[onBegin]% %[onEnd]%></n-signature>`;
    return template;
  }
  set template(templateString) { }
};
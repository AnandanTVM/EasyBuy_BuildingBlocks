'use strict';
let Attribute = require('../../core/Attributes');
let Component = require('../../core/Component');

module.exports = class StackedVerticalBarChart extends Component {
  constructor() {
    const name = 'NG-stacked-bar-chart-vertical';
    const designerTemplate = `<div class=\"ad-stacked-vertical-bar-chart ad-charts \" component-label="Stacked Vertical Bar Chart"></div>`;
    const paletteTemplate = 'Stacked Vertical Bar Chart';
    const componentLabel = 'Stacked Vertical Bar Chart';
    const templateUrl =
      'articles/#!components-guide-7/ngx-stacked-vertical-bar-chart';

    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel:componentLabel,
      templateUrl:templateUrl
    }
    );
    super.setType(Component.COMPONENT_TYPE_TITLES.NGX_CHARTS.val);

    // not working issue link https://github.com/swimlane/ngx-charts/issues/1080
    // super.addAttribute(new Attribute("[legendPosition]", "", "kv", "p"));
    // not working sofar issue link https://github.com/swimlane/ngx-charts/issues/951
    // super.addAttribute(new Attribute("[activeEntries]", "", "kv", "p"));
    super.addAttribute(
      new Attribute({
        key: '[gradient]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[xAxis]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[yAxis]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[legend]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[showXAxisLabel]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[showYAxisLabel]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[yAxisLabel]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[xAxisLabel]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(select)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[scheme]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[results]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'fxLayout',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'fxFlex',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: '[view]',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '[schemeType]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[roundDomains]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[customColors]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[animations]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[legendTitle]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[xAxisTicks]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[yAxisTicks]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[xAxisTickFormatting]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[yAxisTickFormatting]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[showDataLabel]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[tooltipDisabled]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[barPadding]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[yScaleMax]',
        value: '',
        type: 'kv'
      })
    );
  }
  get template() {
    const template = `<div %fxFlex% %fxLayout%>
    <ngx-charts-bar-vertical-stacked %bCustomProps% %[scheme]% %[results]% %style% %class% %[gradient]% %[xAxis]% %[yAxis]% %[legend]% %[showXAxisLabel]% %[showYAxisLabel]% %[yAxisLabel]% %[xAxisLabel]% %(select)% %[view]% %[schemeType]% %[roundDomains]% %[customColors]% %[animations]% %[legendTitle]% %[xAxisTicks]% %[yAxisTicks]% %[xAxisTickFormatting]% %[yAxisTickFormatting]% %[showDataLabel]% %[tooltipDisabled]% %[barPadding]% %[yScaleMax]%></ngx-charts-bar-vertical-stacked>
  </div>`;
    return template;
  }
  set template(templateString) {}
};
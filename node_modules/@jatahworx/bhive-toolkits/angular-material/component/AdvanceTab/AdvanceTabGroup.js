"use strict";
let AdvancedComponent = require("../../../core/AdvancedComponent");
let Attribute = require("../../../core/Attributes");

module.exports = class advanceTabGroup extends AdvancedComponent {
    constructor() {
        const name = "ng-tab-group";
        const designerTemplate = `
        <ng-tab-group onclick="click(event)" activeTab="" component-label="Tab Group" class="ad-element flex-shrink-0 flex-grow-1">
            <ng-tab-content n-adv-child></ng-tab-content>
            <div slot="add">
                <button id="addTab" class="add-child-button flex-column flex-justify-center" no-select>New Tab</button>
            </div>
        </ng-tab-group>
        `;
        const paletteTemplate = "Tabs";
        const componentLabel = 'Tabs';
        const templateUrl = "articles/#!components-guide-7/tabs";
        super({
            name,
            template: ``,
            designerTemplate,
            paletteTemplate,
            componentLabel,
            templateUrl
        });
        super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.LAYOUT.val);
        super.addAttribute(
            new Attribute({
                key: 'animationDuration',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(
            new Attribute({
                key: 'backgroundColor',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(new Attribute({
            key: 'color',
            value: '',
            type: 'kv'
        }));
        super.addAttribute(
            new Attribute({
                key: 'matAlignTabs',
                value: 'start',
                type: 'a'
            })
        );
        super.addAttribute(
            new Attribute({
                key: '[disableRipple]',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(
            new Attribute({
                key: 'dynamicHeight',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(
            new Attribute({
                key: 'headerPosition',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(
            new Attribute({
                key: 'selectedIndex',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(
            new Attribute({
                key: '(animationDone)',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(
            new Attribute({
                key: '(focusChange)',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(
            new Attribute({
                key: '(selectedIndexChange)',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(
            new Attribute({
                key: '(selectedTabChange)',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(new Attribute({
            key: 'stretchTabs',
            value: '',
            type: 'kv',
        }));
        super.composeTemplate({
            styles: `
            :host {
                display: flex;
                padding: 1em;
                min-width: 20em;
                flex-direction: column;
                align-self: start;
              }
              .add-tab-button {
                display: flex;
                flex-direction: column;
             }
             #tab_parent {
                display: flex;
                flex-direction: row;
                border-bottom: 1px solid #afafaf;
                margin-top: 1em;
              }
            #tab-content{
                display: flex;
                flex-direction: row;
                margin-top: 1em;
            }

        `,
            slotsTemplate: `   
            <div id="tab_parent">
                <slot name="mat-tab"></slot>
            </div>
            <div id="tab-content">
                <slot name="mat-tab-content"></slot>
            </div>
            <div class="add-tab-button">
                <slot id="addSlot" name="add"></slot>
            </div>
        `,

            onInit: function () {

            },

            onDestroy: function () {

            },

            customMethods: {
                click: function (e) {
                    if (e.target.id === "addTab") {
                        let activeTabID = $(this).attr('active-tab-id');
                        let activeTabButton = $(this).find(`button[tab-id=${activeTabID}]`);
                        let activeTab = $(this).find(`ng-tab-content[tab-id=${activeTabID}]`);
                        $(activeTabButton).removeClass('activeTab');
                        $(activeTab).removeClass('tab-display-block').addClass('tab-display-none');
                        this.addChild("ng-tab-content");
                    }
                }
            }
        });
    }
    get template() {
        let componentAttributes = this.getHtmlAttributes(this.htmlAttributes);
        let tabsAlign = componentAttributes.matAlignTabs['_value'];
        let stretchTabValue = componentAttributes.stretchTabs['_value'];
        let template;
        if (componentAttributes.headerPosition['_value'] != "") {
            template = `<mat-tab-group mat-align-tabs="${tabsAlign}" ${stretchTabValue} %style% %class% %bCustomProps% %[disableRipple]% %animationDuration% %backgroundColor% %color% %dynamicHeight% %headerPosition% %selectedIndex% %(animationDone)% %(focusChange)% %(selectedIndexChange)% %(selectedTabChange)%></mat-tab-group>`;
        } else {
            template = `<mat-tab-group mat-align-tabs="${tabsAlign}" ${stretchTabValue} %style% %[disableRipple]% %class% %bCustomProps% %animationDuration% %backgroundColor% %color% %dynamicHeight% %selectedIndex% %(animationDone)% %(focusChange)% %(selectedIndexChange)% %(selectedTabChange)%></mat-tab-group>`;
        }
        return template;
    }
    set template(templateString) { }
};
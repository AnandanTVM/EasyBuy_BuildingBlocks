'use strict';
let Attribute = require('../../../core/Attributes');
let AdvancedComponent = require("../../../core/AdvancedComponent");
let BGuid = require('../../../util/BGuid');

module.exports = class advanceTabContent extends AdvancedComponent {
    constructor() {
        const tabButton = `<button class="tabbutton" slot="mat-tab" adv-button>New Tab</button>`;
        const name = "ng-tab-content";
        const designerTemplate = `
        <ng-tab-content class="drop ad-element flex-shrink-0 flex-grow-1 tab-display-none" component-label="New Tab" slot="mat-tab-content" block-copy block-minimize>
        </ng-tab-content>
        `;
        const paletteTemplate = 'Tab';
        const componentLabel = 'Tab';
        const templateUrl = 'articles/#!components-guide-7/tabs';

        super({
            name,
            template: ``,
            designerTemplate,
            paletteTemplate,
            componentLabel,
            isAdvancedChild: true,
            templateUrl
        });
        super.addAttribute(
            new Attribute({
                key: 'label',
                value: 'New Tab',
                type: 'kv',
                useAsLabel: true,
            })
        );
        super.addAttribute(
            new Attribute({
                key: '[disabled]',
                value: '',
                type: 'kv'
            })
        );
        super.addAttribute(new Attribute({
            key: 'leftTabIcon',
            value: '',
            type: 'a'
        }));

        super.addAttribute(new Attribute({
            key: 'leftIconClick',
            value: '',
            type: 'a'
        }));

        super.addAttribute(new Attribute({
            key: 'rightTabIcon',
            value: '',
            type: 'a'
        }));

        super.addAttribute(new Attribute({
            key: 'rightIconClick',
            value: '',
            type: 'a'
        }));

        super.addAttribute(new Attribute({
            key: 'tabIconClass',
            value: '',
            type: 'a'
        }));

        super.addAttribute(new Attribute({
            key: 'lazyLoading',
            value: 'false',
            type: 'kv',
        }));

        super.addAttribute(new Attribute({
            key: 'dynamicTab',
            value: 'false',
            type: 'dav',
            templateUpdater: {
                valueChange: (elementValue, attribs) => {
                    let componentInstance = this;
                    let componentAttribute = componentInstance.getHtmlAttributes(attribs);
                    if (elementValue == "dynamic") {
                        if (componentAttribute['tabDatasource'] || componentAttribute['tabDatasource']._visibility && componentAttribute['[tabDatasource]']._visibility == false && componentAttribute['tabLabels'] || componentAttribute['tabLabels']._visibility && componentAttribute['tabLabels']._visibility == false) {
                            componentAttribute['tabDatasource']._visibility = true;
                            componentAttribute['tabLabels']._visibility = true;
                        }
                    } else if (componentAttribute['tabDatasource'] || componentAttribute['tabDatasource']._visibility && componentAttribute['tabDatasource']._visibility == true && componentAttribute['tabLabels'] || componentAttribute['tabLabels']._visibility && componentAttribute['tabLabels']._visibility == true) {
                        componentAttribute['tabDatasource']._visibility = false;
                        componentAttribute['tabLabels']._visibility = false;
                    }
                    return attribs;
                }
            }
        }));

        super.addAttribute(new Attribute({
            key: 'tabDatasource',
            value: '',
            type: 'a',
            visible: false,
        }));

        super.addAttribute(new Attribute({
            key: 'tabLabels',
            value: '',
            type: 'a',
            visible: false,
        }));

        super.composeTemplate({
            styles: `
            :host {
                margin: 0 !important;
                position: relative;
                bottom: 1em;
                height: 100%;
                min-height: 5em;
              }

              `,

            onInit: function () {
                let componentParentInstance = $(this).parent();
                let componentLabel;

                function hideShowTabContent(element, action) {
                    if (action == "show") {
                        let currentTabID = $(element).attr('tab-id');
                        $(element).removeClass('tab-display-none').addClass('tab-display-block');
                        $(element).parent().attr('active-tab-id', currentTabID)
                    } else if (action == "hide") {
                        $(element).removeClass('tab-display-block').addClass('tab-display-none');
                    }
                }

                var observer = new MutationObserver((mutations) => {
                    mutations.forEach((mutation) => {
                        if (mutation.type == 'attributes' && mutation.attributeName == "component-label") {
                            componentLabel = mutation.target.attributes['component-label'].value;
                            let tabcontentID = $(this).attr('tab-id');
                            $(componentParentInstance).find(`button[tab-id=${tabcontentID}]`).html(componentLabel);

                        }
                    });
                });
                observer.observe(this, { attributes: true });

                let tabLabel = $(this).attr('component-label');
                let tabButtonClick = $(tabButton).click(function () {
                    $(componentParentInstance).find('.activeTab').removeClass('activeTab')
                    $(this).addClass('activeTab');
                    let activeTabID = $(this).parent().attr('active-tab-id');
                    let currentTabContent = $(componentParentInstance).find(`ng-tab-content[tab-id="${$(this).attr('tab-id')}"]`);
                    let hideElement = $(componentParentInstance).find(`ng-tab-content[tab-id=${activeTabID}]`);
                    hideShowTabContent(hideElement, "hide")
                    hideShowTabContent(currentTabContent, "show");
                    $(currentTabContent).trigger("click");
                    event.stopPropagation();
                });
                //adding parent b-editor key to the content as unique id used during deleting
                $(this).attr('parent-id', $(this).parent().attr('b-editor-key'));
                if (!$(this).attr('tab-id')) {
                    let tabId = new BGuid().generate();
                    $(this).attr('tab-id', tabId);
                    $(this).before(tabButtonClick);
                    $(tabButtonClick).html(tabLabel);
                    $(tabButtonClick).attr('tab-id', tabId)
                    let hideElement = $(componentParentInstance).find(`ng-tab-content[tab-id=${$(this).parent().attr('active-tab-id')}]`);
                    if (event && event.type == 'addChildEvent') {
                        $(tabButtonClick).addClass('activeTab');
                        hideShowTabContent(hideElement, "hide");
                        hideShowTabContent(this, "show");
                    }
                    if (!$(this).parent().attr('active-tab-id')) {
                        $(this).parent().attr('active-tab-id', tabId)
                        hideShowTabContent(this, "show");
                        $(tabButtonClick).addClass('activeTab');
                    }
                } else if ($(this).attr('tab-id')) {
                    $(this).parent().find('.tabbutton').bind('click', function () {
                        $(componentParentInstance).find('.activeTab').removeClass('activeTab')
                        $(this).addClass('activeTab');
                        let activeTabID = $(this).parent().attr('active-tab-id');
                        let currentTabContent = $(componentParentInstance).find(`ng-tab-content[tab-id="${$(this).attr('tab-id')}"]`);
                        let hideElement = $(componentParentInstance).find(`ng-tab-content[tab-id=${activeTabID}]`);
                        hideShowTabContent(hideElement, "hide")
                        hideShowTabContent(currentTabContent, "show");
                        $(currentTabContent).trigger("click");
                        event.stopPropagation();
                    });
                }
            },

            onDestroy: function () {
                //deleting the current tab and showing the nearest tab
                if (event && event.type == 'click') {
                    let delectedTabId = $(this).attr('tab-id');
                    let parentID = $(this).attr('parent-id');
                    let componentInstance = $(`[b-editor-key="${parentID}"`).find(`[tab-id=${delectedTabId}]`).parent();
                    let tabButtons = $(componentInstance).children('.tabbutton');
                    var currentActiveTabButton = $(tabButtons).filter('.activeTab');
                    $(componentInstance).find(`[tab-id=${delectedTabId}]`).remove();
                    var currentActiveTabButtonIndex = $(tabButtons).index(currentActiveTabButton)
                    let tabContents = $(componentInstance).find('ng-tab-content');
                    if (currentActiveTabButtonIndex == tabButtons.length - 1) {
                        let previousTabButton = $(componentInstance).find('.tabbutton')[0];
                        $(tabContents[0]).removeClass("tab-display-none").addClass("tab-display-block");
                        $(tabContents[0]).trigger("click");
                        $(previousTabButton).addClass('activeTab');
                        $(componentInstance).attr('active-tab-id', $(previousTabButton).attr('tab-id'));
                    } else {
                        let previousTabButton = $(componentInstance).find('.tabbutton')[currentActiveTabButtonIndex];
                        $(tabContents[currentActiveTabButtonIndex]).removeClass("tab-display-none").addClass("tab-display-block");
                        $(tabContents[currentActiveTabButtonIndex]).trigger("click");
                        $(previousTabButton).addClass('activeTab');
                        $(componentInstance).attr('active-tab-id', $(previousTabButton).attr('tab-id'));
                    }
                }
            }
        });
    }


    get template() {
        const componentHtmlAttributes = this.getHtmlAttributes(this.htmlAttributes);
        let template;
        let lazyLoadingValue = componentHtmlAttributes.lazyLoading['_value'];
        let leftTabIconValue = componentHtmlAttributes.leftTabIcon['_value'];
        let rightTabIconValue = componentHtmlAttributes.rightTabIcon['_value'];
        let tabIconClass = componentHtmlAttributes.tabIconClass['_value'];
        let leftTabIconClick = componentHtmlAttributes.leftIconClick['_value'];
        let rightTabIconClick = componentHtmlAttributes.rightIconClick['_value'];
        let tabLabel = componentHtmlAttributes.label['_value'];
        let dynamicTabValue = componentHtmlAttributes.dynamicTab['_value'];

        //tab with only icon
        if (leftTabIconValue && leftTabIconValue != "" || rightTabIconValue && rightTabIconValue != "" || (leftTabIconValue && leftTabIconValue != "" && rightTabIconValue && rightTabIconValue != "")) {
            let rightIconsTab = `${tabLabel}<mat-icon class="${tabIconClass}" ${rightTabIconClick && rightTabIconClick != "" ? '(click)=' + rightTabIconClick : ''}>${rightTabIconValue}</mat-icon>`
            let leftIconsTab = `<mat-icon class="${tabIconClass}" ${leftTabIconClick && leftTabIconClick != "" ? '(click)=' + leftTabIconClick : ''}>${leftTabIconValue}</mat-icon>${tabLabel}`
            let bothSideIconTab = `<mat-icon class="${tabIconClass}" ${leftTabIconClick && leftTabIconClick != "" ? '(click)=' + leftTabIconClick : ''}>${leftTabIconValue}</mat-icon>${tabLabel}<mat-icon class="${tabIconClass}" ${rightTabIconClick && rightTabIconClick != "" ? '(click)=' + rightTabIconClick : ''}>${rightTabIconValue}</mat-icon>`

            template = `<mat-tab %style% %bCustomProps% %class% %[disabled]%>
                            <ng-template mat-tab-label>
                                ${(leftTabIconValue && leftTabIconValue != "" && rightTabIconValue == "") ? leftIconsTab : (rightTabIconValue && rightTabIconValue != "" && leftTabIconValue == "") ? rightIconsTab : (leftTabIconValue && leftTabIconValue != "" && rightTabIconValue && rightTabIconValue != "") ? bothSideIconTab : ''}
                            </ng-template>
                        </mat-tab>`;
            //tab with icon, and lazy loading only 
            if (lazyLoadingValue && lazyLoadingValue != "" && lazyLoadingValue == 'true') {
                template = `<mat-tab %style% %label% %class% %[disabled]%>
                                    <ng-template mat-tab-label>
                                    ${(leftTabIconValue && leftTabIconValue != "" && rightTabIconValue == "") ? leftIconsTab : (rightTabIconValue && rightTabIconValue != "" && leftTabIconValue == "") ? rightIconsTab : (leftTabIconValue && leftTabIconValue != "" && rightTabIconValue && rightTabIconValue != "") ? bothSideIconTab : ''}
                                    </ng-template>
                                    <ng-template %bCustomProps% matTabContent>
                                    </ng-template>
                                </mat-tab>`;
            }
            if (dynamicTabValue == "dynamic") {
                template = `
                                <ng-template ngFor let-tab [ngForOf]="%tabDatasource%" let-i="index">
                                <mat-tab %style% %label% %class% %bCustomProps% [label]="%tabLabels%" %[disabled]%>

                                </mat-tab>
                                </ng-template>`
            }
        }

        //tab with only lazy loading
        else if (lazyLoadingValue && lazyLoadingValue != "" && lazyLoadingValue == "true") {
            template = `<mat-tab %style% %label% %class% %[disabled]%>
                            <ng-template %bCustomProps% matTabContent>
                            </ng-template>
                         </mat-tab>`;
            if (dynamicTabValue == "dynamic") {
                template = `
                            <ng-template ngFor let-tab [ngForOf]="%tabDatasource%" let-i="index">
                                <mat-tab %style% %label% %class% %bCustomProps% [label]="%tabLabels%" %[disabled]%>
                                </mat-tab>
                            </ng-template>`
            }
        }

        //normal tab
        else if (lazyLoadingValue && lazyLoadingValue == 'false' || lazyLoadingValue == "") {
            template = `<mat-tab %style% %label% %class% %bCustomProps% %[disabled]%></mat-tab>`;
            if (dynamicTabValue == "dynamic") {
                template = `
                                <ng-template ngFor let-tab [ngForOf]="%tabDatasource%" let-i="index">
                                <mat-tab %style% %label% %class% %bCustomProps% [label]="%tabLabels%" %[disabled]%>

                                </mat-tab>
                                </ng-template>`
            }
        }


        return template;
    }
    set template(templateString) { }
};
'use strict';
let Attribute = require('../../core/Attributes');
let Component = require('../../core/Component');

module.exports = class SideNav extends Component {
  constructor() {
    const name = 'NG-sidenav';
    const designerTemplate = `<div class=\"drop\" component-label="Sidenav">
                                  </div>`;
    const paletteTemplate = 'Sidenav';
    const componentLabel = 'Sidenav';
    const templateUrl =
      'articles/#!components-guide-7/sidenav';
    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      templateUrl: templateUrl
    }
      
    );
    super.setType(Component.COMPONENT_TYPE_TITLES.NAVIGATION.val);

    super.addAttribute(
      new Attribute({
        key: 'componentLabel',
        value: 'Sidenav',
        type: 'kv',
        useAsLabel: true
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[sidenavMode]',
        value: '',
        type: 'a'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[opened]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[sidenavPosition]',
        value: '',
        type: 'a'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(opened)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(closed)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(toggle)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'autoFocus',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'disableClose',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(positionChanged)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(openedChange)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'fixedBottomGap',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'fixedInViewport',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'fixedTopGap',
        value: '',
        type: 'kv'
      })
    );
    
  }
  get template() {
    const template = `<mat-sidenav #sidenav %bCustomProps% %style% %class% [mode]=\"%[sidenavMode]%\" %(opened)% %(closed)% %(toggle)% [position]=\"%[sidenavPosition]%\" %[opened]% %autoFocus% %disableClose% %(positionChanged)% %(openedChange)% %fixedBottomGap% %fixedInViewport% %fixedTopGap%></mat-sidenav>`;
    return template;
  }
  set template(templateString) {}
};
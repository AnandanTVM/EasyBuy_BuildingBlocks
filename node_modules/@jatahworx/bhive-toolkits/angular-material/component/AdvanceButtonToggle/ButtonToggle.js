'use strict';
let Attribute = require('../../../core/Attributes');
let AdvancedComponent = require("../../../core/AdvancedComponent");

module.exports = class ButtonToggle extends AdvancedComponent {
  constructor() {
    let componentInstance;
    const name = 'ng-button-toggle';
    const designerTemplate = `<ng-button-toggle slot="buttontoggle" class="non-dropable-comp-border form-control-chip ad-button border-radius-0" component-label="Button Toggle" block-copy>
                                <span class="component-placeholder-chip ad-select-text"></span>
                              </ng-button-toggle>`;
    const paletteTemplate = 'Button Toggle';
    const componentLabel = 'Button Toggle';
    const templateUrl = 'articles/#!components-guide-7/button-toggle';

    super({
      name: name,
      template: ``,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      isAdvancedChild: true,
      templateUrl: templateUrl
    });
    super.addAttribute(
      new Attribute({
        key: 'ButtonToggleName',
        value: 'Button Toggle',
        type: 'a',
        useAsLabel: true,
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[name]',
        value: '',
        type: 'kv'
      }));
    super.addAttribute(new Attribute({
      key: '[id]',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '[checked]',
        value: '',
        type: 'kv'
      }));
    super.addAttribute(new Attribute({
      key: '[value]',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '[disableRipple]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[disabled]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(change)',
        value: '',
        type: 'kv'
      }));
    super.addAttribute(
      new Attribute({
        key: '*ngFor',
        value: '',
        type: 'kv'
      })
    );
    //Show Icon Before Label
    super.addAttribute(
      new Attribute({
        key: 'showIconBeforeLabel',
        value: '',
        type: 'dav',
        complexity: 'advanced',
        templateUpdater: {
          valueChange: (elementValue, attribs) => {
            componentInstance = this;
            let componentAttributes = componentInstance.getHtmlAttributes(attribs);
            if (elementValue == "showIconBeforeLabel") {
              componentAttributes.showIconBeforeLabel['_value'] == 'showIconBeforeLabel';
              componentAttributes.showIconAfterLabel['_value'] == '';
            } else {
              componentAttributes.showIconBeforeLabel['_value'] == '';
            }
            return attribs;
          }
        }
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'IconBeforeLabel',
        value: 'home',
        type: 'a',
        complexity: 'advanced'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'IconBeforeLabelClass',
        value: '',
        type: 'a',
        complexity: 'advanced'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'IconBeforeLabelStyle',
        value: '',
        type: 'a',
        complexity: 'advanced'
      })
    );
    //Show Icon After Label
    super.addAttribute(
      new Attribute({
        key: 'showIconAfterLabel',
        value: '',
        type: 'dav',
        complexity: 'advanced',
        templateUpdater: {
          valueChange: (elementValue, attribs) => {
            componentInstance = this;
            let componentAttributes = componentInstance.getHtmlAttributes(attribs);
            if (elementValue == "showIconAfterLabel") {
              componentAttributes.showIconAfterLabel['_value'] == 'showIconAfterLabel';
              componentAttributes.showIconBeforeLabel['_value'] == '';
            } else {
              componentAttributes.showIconAfterLabel['_value'] == '';
            }
            return attribs;
          }
        }
      })
    );

    super.addAttribute(
      new Attribute({
        key: 'IconAfterLabel',
        value: 'home',
        type: 'a',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: 'IconAfterLabelClass',
        value: '',
        type: 'a',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: 'IconAfterLabelStyle',
        value: '',
        type: 'a',
        complexity: 'advanced'
      })
    );
  }

  get template() {
    let componentAttributes = this.getHtmlAttributes(this.htmlAttributes);
    let showIconBeforeLabel = componentAttributes.showIconBeforeLabel['_value'];
    let showIconAfterLabel = componentAttributes.showIconAfterLabel['_value'];
    let template = '';

    template = `
    <mat-button-toggle
      %style% %class%
      %[name]% %[id]% %[checked]% %[value]% %[disableRipple]% %[disabled]%
      %(change)% %*ngFor%
      %bCustomProps%> %ButtonToggleName%
    </mat-button-toggle>
    `;

    // Both IconAfterLabel and IconBeforeLabel Selected 
    if (showIconAfterLabel == "showIconAfterLabel" && showIconBeforeLabel == "showIconBeforeLabel") {
      template = `
      <mat-button-toggle
        %style% %class%
        %[name]% %[id]% %[checked]% %[value]% %[disableRipple]% %[disabled]% 
        %(change)% %*ngFor%
        %bCustomProps%>
            <mat-icon class="%IconBeforeLabelClass%" style="%IconBeforeLabelStyle%">%IconBeforeLabel%</mat-icon>
              <span>%ButtonToggleName%</span>
            <mat-icon class="%IconAfterLabelClass%" style="%IconAfterLabelStyle%">%IconAfterLabel%</mat-icon>          
      </mat-button-toggle>
      `;
    }

    // IconBeforeLabel Selected
    if (showIconBeforeLabel == "showIconBeforeLabel" && showIconAfterLabel != "showIconAfterLabel") {
      template = `
      <mat-button-toggle
        %style% %class%
        %[name]% %[id]% %[checked]% %[value]% %[disableRipple]% %[disabled]%
        %(change)% %*ngFor%
        %bCustomProps%>
          <mat-icon class="%IconBeforeLabelClass%" style="%IconBeforeLabelStyle%">%IconBeforeLabel%</mat-icon>
            <span>%ButtonToggleName%</span>      
      </mat-button-toggle>
      `;
    }

    // IconAfterLabel Selected
    if (showIconAfterLabel == "showIconAfterLabel" && showIconBeforeLabel != "showIconBeforeLabel") {
      template = `
      <mat-button-toggle
        %style% %class%
        %[name]% %[id]% %[checked]% %[value]% %[disableRipple]% %[disabled]%
        %(change)% %*ngFor%
        %bCustomProps%>
          <span>%ButtonToggleName%</span>
          <mat-icon class="%IconAfterLabelClass%" style="%IconAfterLabelStyle%">%IconAfterLabel%</mat-icon>
      </mat-button-toggle>
      `;
    }
    return template;
  }
  set template(templateString) { }
};
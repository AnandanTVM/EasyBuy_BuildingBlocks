'use strict';
let Attribute = require('../../core/Attributes');
let Component = require('../../core/Component');

module.exports = class Stepper extends Component {
  constructor() {
    const name = 'NG-Stepper';
    const designerTemplate = `<div class=\"drop\" component-label="Stepper"></div>`;
    const paletteTemplate = 'Stepper';
    const componentLabel = 'Stepper';
    const templateUrl =
      'articles/#!components-guide-7/stepper';

    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      templateUrl: templateUrl
    }
    );
    super.setType(Component.COMPONENT_TYPE_TITLES.LAYOUT.val);

    super.addAttribute(
      new Attribute({
        key: '[linear]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'type',
        value: 'horizontal',
        type: 'a'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'matHorizontalStepper',
        value: '',
        type: 'vk'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'matVerticalStepper',
        value: '',
        type: 'vk'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[selected]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[selectedIndex]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(selectionChange)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(animationDone)',
        value: '',
        type: 'kv'
      })
    );
  }
  get template() {
    const template = `<mat-%type%-stepper %[linear]% %matVerticalStepper% %[selected]% %[selectedIndex]% %(selectionChange)% %matHorizontalStepper% %bCustomProps% %style% %class% %(animationDone)%></mat-%type%-stepper>`;
    return template;
  }
  set template(templateString) {}
};
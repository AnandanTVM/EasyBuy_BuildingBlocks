'use strict';
let Attribute = require('../../core/Attributes');
let Component = require('../../core/Component');

module.exports = class Slide extends Component {
  constructor() {
    const name = 'NG-slide';
    const designerTemplate = `<div class=\"non-dropable-comp-border form-control-comp\">
                                <div class="ad-slide"></div>
                              </div>`;
    const paletteTemplate = 'Slide Toggle';
    const componentLabel = 'Slide Toggle';
    const templateUrl =
      'articles/#!components-guide-7/slide-toggle';

    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel:componentLabel,
      templateUrl: templateUrl
    }
    );
    super.setType(Component.COMPONENT_TYPE_TITLES.FORM_CONTROLS.val);
    super.addAttribute(
      new Attribute({
        key: 'componentLabel',
        value: 'Slide Toggle',
        type: 'kv',
        useAsLabel: true
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[required]',
        value: 'false',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'text',
      value: '',
      type: 'a'
    }));
    super.addAttribute(
      new Attribute({
        key: '[labelPosition]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'name',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: 'id',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '(change)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'checked',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'color',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '[disabled]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[disableRipple]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[disableToggleValue]',
        value: '',
        type: 'kv'
      })
    );
    
    super.addAttribute(
      new Attribute({
        key: '(toggleChange)',
        value: '',
        type: 'kv'
      })
    );
  }
  get template() {
    const template = `<mat-slide-toggle %[required]% %[labelPosition]% %name% %bCustomProps% %id% %style% %class% %(change)% %checked% %color% %[disabled]% %(toggleChange)% %[disableToggleValue]% %[disableRipple]%> %text%</mat-slide-toggle>`;
    return template;
  }
  set template(templateString) {}
};
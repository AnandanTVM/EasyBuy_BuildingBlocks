"use strict";
let AdvancedComponent = require("../../core/AdvancedComponent");
let Attribute = require("../../core/Attributes");

module.exports = class autoComplete extends AdvancedComponent {
  constructor() {
    let componentInstance;
    const name = "ng-autocomplete";
    const designerTemplate = `
                                <ng-autocomplete class="non-dropable-comp-border form-control-comp">
                                  <div fxLayoutAlign="center center" class="ad-select-field form-control-button">
                                    <span class="component-placeholder ad-select-text"></span>
                                    <div class="select-drop-icon"></div>
                                  </div>
                                </ng-autocomplete>`;
    const paletteTemplate = "Autocomplete";
    const componentLabel = 'Autocomplete';
    const templateUrl = "articles/#!components-guide-7/autocomplete";
    super({
      name,
      designerTemplate,
      paletteTemplate,
      componentLabel,
      templateUrl
    });
    super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.LAYOUT.val);


    super.addAttribute(
      new Attribute({
        key: 'matAutocomplete',
        value: 'auto',
        type: 'vk'
      })
    );

    super.addAttribute(
      new Attribute({
        key: 'autoActiveFirstOption',
        value: '',
        type: 'a',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '[disableRipple]',
        value: '',
        type: 'kv',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '[displayWith]',
        value: '',
        type: 'kv',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '[panelWidth]',
        value: '',
        type: 'kv',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '(closed)',
        value: '',
        type: 'kv',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '(opened)',
        value: '',
        type: 'kv',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '(optionSelected)',
        value: '',
        type: 'kv',
        complexity: 'advanced'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '*ngFor',
        value: '',
        type: 'kv'
      })
    );

    super.addAttribute(new Attribute({
      key: '(optionClick)',
      value: '',
      type: 'dav',
      templateUpdater: {
        postSave: function (elementValue, parentDesignerReference, attribs) {
          let optionclickvalue;
          if (typeof elementValue === 'string' && elementValue != '') {
            optionclickvalue = '(click)=' + elementValue;
          }
          return optionclickvalue;
        }
      }
    }));

    super.addAttribute(
      new Attribute({
        key: '[groupOptions]',
        value: 'noGroup',
        type: 'dav',
        templateUpdater: {
          valueChange: (elementValue, attribs) => {
            componentInstance = this;
            let componentAttribute = componentInstance.getHtmlAttributes(attribs);
            if (elementValue == "group") {
              if (componentAttribute['[label]'] || componentAttribute['[label]']._visibility && componentAttribute['[label]']._visibility == false && componentAttribute['[optionDatasource]'] || componentAttribute['[optionDatasource]']._visibility && componentAttribute['[optionDatasource]']._visibility == false) {
                componentAttribute['[label]']._visibility = true;
                componentAttribute['[optionDatasource]']._visibility = true;
              }
            } else if (componentAttribute['[label]'] || componentAttribute['[label]']._visibility && componentAttribute['[label]']._visibility == true && componentAttribute['[optionDatasource]'] || componentAttribute['[optionDatasource]']._visibility && componentAttribute['[optionDatasource]']._visibility == true) {
              componentAttribute['[label]']._visibility = false;
              componentAttribute['[optionDatasource]']._visibility = false;
            }
            return attribs;
          }
        }
      })
    );


    super.addAttribute(
      new Attribute({
        key: 'optionView',
        value: '',
        type: 'a'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '[value]',
        value: '',
        type: 'kv'
      })
    );


    super.addAttribute(
      new Attribute({
        key: '[optionDatasource]',
        value: '',
        type: 'a',
        visible: false,
      })
    );


    super.addAttribute(
      new Attribute({
        key: '[label]',
        value: '',
        type: 'kv',
        visible: false
      })
    );

    super.composeTemplate({
      styles: `
          :host {
            border-radius: 2px;
            display: flex;
            position: relative;
            margin: 1em 0.5em;
            padding: 5px;
            align-self: start;
          }
          `
    });

  }
  get template() {
    let componentAttributes = this.getHtmlAttributes(this.htmlAttributes);
	let groupOptionValue = componentAttributes['[groupOptions]']['_value'];

	// option  group specific attribs
	
    let template = '';
    template = `<mat-autocomplete %matAutocomplete% %[disableRipple]% %[displayWith]% %autoActiveFirstOption% %(opened)% %(closed)% %(optionSelected)% %[panelWidth]% %bCustomProps%>
					<mat-option %style% %class% %*ngFor% %[value]% %(optionClick)%>
					    %optionView%
					</mat-option>
				</mat-autocomplete>`;
	
    if (groupOptionValue && groupOptionValue == "group") {
		const optionDatasource = componentAttributes['[optionDatasource]']._value;
	    let groupOptionsNgFor = optionDatasource ? `*ngFor=\"let option of %[optionDatasource]%; let p = index;\"` : ''
        template = `<mat-autocomplete %matAutocomplete% %[disableRipple]% %[displayWith]% %autoActiveFirstOption% %(opened)% %(closed)% %(optionSelected)% %[panelWidth]% %bCustomProps%>
					  <mat-optgroup %*ngFor% %[label]%>
						  <mat-option %style% %class% ${groupOptionsNgFor} %[value]% %(optionClick)%>
						    %optionView%
						  </mat-option>
					  </mat-optgroup>
				    </mat-autocomplete>`;
    }
    return template;
  }
  set template(templateString) { }

};
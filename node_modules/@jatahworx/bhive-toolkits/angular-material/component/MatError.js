'use strict';
let AdvancedComponent = require('../../core/AdvancedComponent');
let Attribute = require('../../core/Attributes');

module.exports = class MatError extends AdvancedComponent {
  constructor() {
    const name = 'ng-mat-error';
    const designerTemplate =
      `<ng-mat-error class="ad-mat-error non-dropable-comp-border form-control-comp">
          <span class="component-placeholder">Error</span>
      </ng-mat-error>`;
    const paletteTemplate = 'Error';
    const componentLabel = 'Error';
    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      templateUrl: 'articles/#!components-guide-7/error',
    });
    super.composeTemplate({
      styles: `:host {
        position: relative;
        flex: 1 0 auto;
        display: flex;
        }`
    });
    super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.FORM_CONTROLS.val);

    super.addAttribute(
      new Attribute({
        key: 'matError',
        value: [],
        type: 'a',
        visible: false,
        isVisibleForParent: true
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'Error Message',
        value: '',
        type: 'a',
        visible: true,
        isVisibleForParent: false
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'Error Condition',
        value: '',
        type: 'a',
        visible: true,
        isVisibleForParent: false
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'hintAlign',
        value: '',
        type: 'a',
        visible: true,
        isVisibleForParent: false
      })
    );
  }

  fromParent(parentInstance) {
  }

  get template() {
    let returnTemplate = '';
    let matErrorAttributes = this.getHtmlAttributes(this.htmlAttributes);
    if (matErrorAttributes['Error Message']._value && matErrorAttributes['Error Message']._value && matErrorAttributes['Error Message']._value) {
      return `<mat-error %style% %class% %bCustomProps% align="${matErrorAttributes['hintAlign']._value}" *ngIf="${matErrorAttributes['Error Condition']._value}">${matErrorAttributes['Error Message']._value}</mat-error>`;
    }
    let errorList = matErrorAttributes['matError']._value instanceof Array && matErrorAttributes['matError']._value.length > 0 ? matErrorAttributes['matError']._value : [];
    for (let i = 0; i < errorList.length; i++) {
      if (errorList[i].toggle && errorList[i].input1 && errorList[i].input2) {
        returnTemplate += `<mat-error align="${errorList[i].toggle.selected}" *ngIf="${errorList[i].input1}">${errorList[i].input2}</mat-error>`;
      } else if (errorList[i].input1 && errorList[i].input2) {
        returnTemplate += `<mat-error *ngIf="${errorList[i].input1}">${errorList[i].input2}</mat-error>`;
      }
    }
    return returnTemplate;
  }

  set template(t) { }
};
'use strict';
let Attribute = require('../../core/Attributes');
let AdvancedComponent = require('../../core/AdvancedComponent');

module.exports = class Select extends AdvancedComponent {
  constructor() {
    let componentInstance;
    const name = 'NG-Select';
    const designerTemplate = `
                                  <ng-select class="non-dropable-comp-border form-control-comp">
                                    <div fxLayoutAlign="center center" class="ad-select-field form-control-button">
                                    <span class="component-placeholder ad-select-text">Select</span>
                                    <div class="select-drop-icon"></div>
                                    </div>
                                  </ng-select>`;
    const paletteTemplate = 'Select';
    const componentLabel = 'Select';
    const templateUrl =
      'articles/#!components-guide-7/select';
    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      templateUrl: templateUrl
    });

    super.addAttribute(
      new Attribute({
        key: 'placeholder',
        value: 'Select',
        type: 'kv',
        useAsLabel: true,
      })
    );

    super.addAttribute(new Attribute({
      key: 'datasource',
      value: '',
      type: 'a'
    }));

    super.addAttribute(
      new Attribute({
        key: '[groupOptions]',
        value: 'noGroup',
        type: 'dav',
        templateUpdater: {
          valueChange: (elementValue, attribs) => {
            componentInstance = this;
            let componentAttribute = componentInstance.getHtmlAttributes(attribs);
            if (elementValue == "group") {
              if (componentAttribute['[groupLabels]'] || componentAttribute['[groupLabels]']._visibility && componentAttribute['[groupLabels]']._visibility == false && componentAttribute['[disableGroup]'] || componentAttribute['[disableGroup]']._visibility && componentAttribute['[disableGroup]']._visibility == false && componentAttribute['[optionDatasource]'] || componentAttribute['[optionDatasource]']._visibility && componentAttribute['[optionDatasource]']._visibility == false) {
                componentAttribute['[groupLabels]']._visibility = true;
                componentAttribute['[disableGroup]']._visibility = true;
                componentAttribute['[optionDatasource]']._visibility = true;
              }
            } else if (componentAttribute['[groupLabels]'] || componentAttribute['[groupLabels]']._visibility && componentAttribute['[groupLabels]']._visibility == true && componentAttribute['[disableGroup]'] || componentAttribute['[disableGroup]']._visibility && componentAttribute['[disableGroup]']._visibility == true && componentAttribute['[optionDatasource]'] || componentAttribute['[optionDatasource]']._visibility && componentAttribute['[optionDatasource]']._visibility == true) {
              componentAttribute['[groupLabels]']._visibility = false;
              componentAttribute['[disableGroup]']._visibility = false;
              componentAttribute['[optionDatasource]']._visibility = false;
            }
            return attribs;
          }
        }
      })
    );
    
    //group labels
    super.addAttribute(
      new Attribute({
        key: '[groupLabels]',
        value: '',
        type: 'kv',
        visible: false,
      })
    );

    //group disable and enable
    super.addAttribute(
      new Attribute({
        key: '[disableGroup]',
        value: '',
        type: 'kv',
        visible: false,
      })
    );

    super.addAttribute(
      new Attribute({
        key: '[optionDatasource]',
        value: '',
        type: 'a',
        visible: false,
      })
    );

    super.addAttribute(
      new Attribute({
        key: 'optionValue',
        value: '',
        type: 'a'
      })
    );

    super.addAttribute(
      new Attribute({
        key: 'optionView',
        value: '',
        type: 'a'
      })
    );

    super.addAttribute(
      new Attribute({
        key: 'formControlName',
        value: '',
        type: 'kv'
      })
    );



    super.addAttribute(
      new Attribute({
        key: '[(ngModel)]',
        value: '',
        type: 'kv'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '[(value)]',
        value: '',
        type: 'kv'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '[required]',
        value: 'false',
        type: 'kv'
      })
    );

    super.addAttribute(new Attribute({
      key: '[appearance]',
      value: "'legacy'",
      type: 'a',
    }));

    super.addAttribute(
      new Attribute({
        key: '[floatLabel]',
        value: "'auto'",
        type: 'kv'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '[disableRipple]',
        value: "",
        type: 'kv',
      })
    );

    /*
      Mutiple select options - able to select more than one options
      link: https://material.angular.io/components/select/overview#multiple-selection
    */
    super.addAttribute(
      new Attribute({
        key: 'multiple',
        value: '',
        type: 'dav',
        templateUpdater: {
          valueChange: (elementValue, attribs) => {
            componentInstance = this;
            let componentAttribute = componentInstance.getHtmlAttributes(attribs);
            if (elementValue == "multiple") {
              if (componentAttribute['CustomTriggerValue'] || componentAttribute['CustomTriggerValue']._visibility && componentAttribute['CustomTriggerValue']._visibility == false) {
                componentAttribute['CustomTriggerValue']._visibility = true;
              }
            } else {
              if (componentAttribute['CustomTriggerValue'] && componentAttribute['CustomTriggerValue']._visibility == true) {
                componentAttribute['CustomTriggerValue']._visibility = false;
              }
            }
            return attribs;
          }
        }
      })
    );

    /*
      custom Trigger text - for multiple select, user custom text to show
      link: https://material.angular.io/components/select/overview#customizing-the-trigger-label
    */
    super.addAttribute(new Attribute({
      key: 'CustomTriggerValue',
      value: '',
      type: 'a',
      visible: false,
    }));

    super.addAttribute(
      new Attribute({
        key: '(openedChange)',
        value: '',
        type: 'kv'
      })
    );

    super.addAttribute(
      new Attribute({
        key: '(selectionChange)',
        value: '',
        type: 'kv'
      })
    );

    /*
      selectCustomOption - to configure the user dynamic options
      reference: mat-hint and mat-error
    */
    super.addAttribute(new Attribute({
      key: 'selectCustomOption',
      value: [],
      type: 'a',
    }));

    /*
      selectStyle - select style basic(component default select styel) and native(normal html select)
      link: https://material.angular.io/components/select/overview
    */
    super.addAttribute(
      new Attribute({
        key: 'selectStyle',
        value: 'Basic',
        type: 'a'
      })
    );

    /*
      panelClass - giving dropdown panel class
      link: https://material.angular.io/components/select/overview#adding-custom-styles-to-the-dropdown-panel
    */
    super.addAttribute(this._classAttr('panelClass'));

    super.addAttribute(
      new Attribute({
        key: '[disabled]',
        value: '',
        type: 'kv'
      })
    );

    super.addAttribute(new Attribute({
      key: '[errorStateMatcher]',
      value: '',
      type: 'kv'
    }));

    super.addAttribute(new Attribute({
      key: 'option',
      value: 'option',
      type: 'a',
      visible: false
    }));    

    super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.FORM_CONTROLS.val);
    super.composeTemplate({
      styles: `
          :host {
            border-radius: 2px;
            display: flex;
            position: relative;
            margin: 1em 0.5em;
            padding: 5px;
            align-self: start;
          }
          `
    });
  }
  get template() {
    let componentAttributes = this.getHtmlAttributes(this.htmlAttributes);
    let selectStyleAttr = componentAttributes.selectStyle['_value'];
    let multiple = componentAttributes.multiple['_value'];
    let groupNames = componentAttributes['[groupLabels]']['_value']
    let disableGroups = componentAttributes['[disableGroup]']['_value']
    let CustomTriggerValue = componentAttributes.CustomTriggerValue['_value'];
    let customOptions = componentAttributes.selectCustomOption['_value'];
    let groupOptionValue = componentAttributes['[groupOptions]']['_value'];
    let option = componentAttributes.option['_value'];
	let datasourceValue = componentAttributes.datasource['_value'];
	const optionDatasource = componentAttributes['[optionDatasource]']._value;
    let options = '';
    let template = '';
    // Native (old) select design
    if (selectStyleAttr == "Native") {
      template = `<mat-form-field [appearance]=\"%[appearance]%\">
                    <select %style% %class% %[errorStateMatcher]% %formControlName% matNativeControl %placeholder% %[(ngModel)]% %[required]% %multiple% %(openedChange)% %(selectionChange)% %bCustomProps%  %[disabled]%>
                      <ng-template ngFor let-${option} [ngForOf]=\"%datasource%\" let-i="index">
                        <option [value]="%optionValue%">%optionView%</option>
                      </ng-template>
                    </select>
                  ~%ng-mat-error%~
                </mat-form-field>`;
      if (customOptions.length > 0) {
        for (let i = 0; i < customOptions.length; i++) {
          let disabledValue = `${customOptions[i].toggle.selected}`;
          options += `<option [value]="'${customOptions[i].input2}'" ${disabledValue == 'true' ? 'disabled' : ''}>${customOptions[i].input1}</option>`
          template = `<mat-form-field [appearance]=\"%[appearance]%\" %[floatLabel]%>
                        <select %style% %[errorStateMatcher]% matNativeControl  %formControlName% %[(value)]% %class% %panelClass% %placeholder% %[(ngModel)]% %[required]% %multiple% %(openedChange)% %(selectionChange)% %bCustomProps%  %[disabled]%>
                          ${options}
                        </select>
                        ~%ng-mat-error%~
                      </mat-form-field>`;
        }
      } 
      if (groupOptionValue && groupOptionValue == "group") {
		let ngFor = datasourceValue ? `ngFor let-${option} [ngForOf]=%datasource% let-i="index"` : '';
		let subOptionsNgFor = optionDatasource ? `ngFor let-subOption [ngForOf]=%[optionDatasource]% let-j="index"` : '';
        template = `<mat-form-field [appearance]=\"%[appearance]%\" %[floatLabel]%>
                        <select %style% matNativeControl %[errorStateMatcher]% %[(value)]% %class% %formControlName% %panelClass% %placeholder% %[(ngModel)]% %[required]% %multiple% %(openedChange)% %(selectionChange)% %bCustomProps%  %[disabled]%>
                          <ng-template ${ngFor}>
                            <optgroup [label]="${groupNames}" [disabled]="${disableGroups}">
                              <ng-template ${subOptionsNgFor}>
                                <option matNativeControl [value]="%optionValue%">%optionView%</option>
                              </ng-template>
                            </optgroup>
                          </ng-template>
                        </select>
                      ~%ng-mat-error%~
                      </mat-form-field>`;
      }
    }
    // Basic select design
    else if (selectStyleAttr == "Basic") {
      template = `<mat-form-field [appearance]=\"%[appearance]%\" %[floatLabel]%>
                    <mat-select %style% %[(value)]% %[errorStateMatcher]% %formControlName% %class% %panelClass% %placeholder% %[(ngModel)]% %[required]% %multiple% %(openedChange)% %(selectionChange)% %bCustomProps%  %[disabled]%>
                      <ng-template ngFor let-${option} [ngForOf]="${datasourceValue}" let-i="index">
                        <mat-option [value]="%optionValue%">%optionView%</mat-option>
                      </ng-template>
                    </mat-select>
                    ~%ng-mat-error%~
                  </mat-form-field>`;
      //multiple and custom trigger text value
      if (multiple != "" && multiple == "multiple" && CustomTriggerValue != "") {
        template = `<mat-form-field [appearance]=\"%[appearance]%\" %[floatLabel]%>
                      <mat-select %style% %[disableRipple]% %formControlName% %[errorStateMatcher]% %[(value)]% %class% %panelClass% %placeholder% %[(ngModel)]% %[required]% %multiple% %(openedChange)% %(selectionChange)% %bCustomProps%  %[disabled]%>
                      <mat-select-trigger>
                        %CustomTriggerValue%
                      </mat-select-trigger>
                      <ng-template ngFor let-${option} [ngForOf]=%datasource% let-i="index">
                        <mat-option [value]="%optionValue%">%optionView%</mat-option>
                      </ng-template>
                      </mat-select>
                      ~%ng-mat-error%~
                    </mat-form-field>`;
      }
      else if (customOptions!=null && customOptions.length > 0) {
        for (let i = 0; i < customOptions.length; i++) {
          options += `<mat-option [value]="'${customOptions[i].input2}'" disabled=${customOptions[i].toggle.selected}>${customOptions[i].input1}</mat-option>`
          template = `<mat-form-field [appearance]=\"%[appearance]%\" %[floatLabel]%>
                          <mat-select %style% %[disableRipple]% %formControlName% %[errorStateMatcher]% %[(value)]% %class% %panelClass% %placeholder% %[(ngModel)]% %[required]% %multiple% %(openedChange)% %(selectionChange)% %bCustomProps%  %[disabled]%>
                            ${options}
                          </mat-select>
                          ~%ng-mat-error%~
                        </mat-form-field>`;
        }
      } else if (groupOptionValue && groupOptionValue == "group") {
		  let ngFor = datasourceValue ? `*ngFor=\"let ${option} of %datasource%; let i=index\"`: '';
		  let subOptionsNgFor = optionDatasource ? `*ngFor=\"let subOption of %[optionDatasource]%; let j=index\"` : '';
          template = `<mat-form-field [appearance]=\"%[appearance]%\" %[floatLabel]%>
                        <mat-select %style% matNativeControl %formControlName% %[errorStateMatcher]% %[(value)]% %class% %panelClass% %placeholder% %[(ngModel)]% %[required]% %multiple% %(openedChange)% %(selectionChange)% %bCustomProps%  %[disabled]%>
                          <mat-optgroup [label]="${groupNames}" [disabled]="${disableGroups}" ${ngFor}>
                              <mat-option matNativeControl ${subOptionsNgFor} [value]="%optionValue%">%optionView%</mat-option>
                          </mat-optgroup>
                        </mat-select>
                      ~%ng-mat-error%~
                      </mat-form-field>`;
        }
    }

    return template;
  }
  set template(templateString) { }

  /**
   * @param {string} key
   * @param {any[]} classArray
   */
  _classConcatenator(key, classArray) {
	if (classArray) {
		if (Array.isArray(classArray) && classArray.length) {
			return `${key}="${classArray.filter(v => typeof v === 'string').join(' ')}"`;
		}
	}
	return '';
  }

 /**
  * @param {string} key
  */
  _classAttr(key) {
    return new Attribute({
	  key: key,
	  value: "",
	  type: 'dav',
	  templateUpdater: {
		  postSave: (arr) => {
			  return this._classConcatenator(key, arr);
		  } 
	  }
	})
  }
};
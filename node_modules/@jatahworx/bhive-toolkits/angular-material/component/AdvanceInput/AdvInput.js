'use strict';
let Attribute = require("../../../core/Attributes");
let AdvancedComponent = require('../../../core/AdvancedComponent');

module.exports = class Input extends AdvancedComponent {
  constructor() {
    const name = 'NG-Input';
    const designerTemplate = `
      <ng-input class="non-dropable-comp-border form-control-comp">
        <div class="ad-textfield form-control-button ad-height">
          <span class="component-placeholder">Input</span>
        </div>
      </ng-input>
    `;
    const paletteTemplate = 'Input';
    const componentLabel = 'Input';
    const templateUrl = 'articles/#!components-guide-7/input';

    super({
      name,
      designerTemplate,
      paletteTemplate,
      componentLabel,
      templateUrl
    });
    super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.FORM_CONTROLS.val);
    super.composeTemplate({
      styles: `
      :host {
        border-radius: 2px;
        display: flex;
        position: relative;
        margin: 1em 0.5em;
        align-self: start;
        padding: 5px;
      }
      `,
    });

    super.addAttribute(
      new Attribute({
        key: 'placeholder',
        value: '',
        type: 'kv',
        useAsLabel: true
      })
    );
    super.addAttribute(new Attribute({
      key: 'value',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: '[appearance]',
      value: "'legacy'",
      type: 'a'
    }));
    super.addAttribute(
      new Attribute({
        key: '[required]',
        value: 'false',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[(ngModel)]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'color',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: 'name',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: 'type',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '[formControl]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'readonly',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[disabled]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'id',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: '[floatLabel]',
      value: "'auto'",
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '[hideRequiredMarker]',
        value: 'false',
        type: 'kv',
        complexity: 'advanced'
      })
    );
  }
  get template() {
    const template = `
    <mat-form-field %color% %style% %class% [appearance]=\"%[appearance]%\" %[floatLabel]% %[hideRequiredMarker]%>
      <input matInput  %[(ngModel)]% %name% %type% %placeholder% %value% %[required]% %bCustomProps% %[formControl]% %readonly% %[disabled]% %id%>
      ~%ng-mat-error%~ ~%ng-input-hint%~ ~%ng-input-label%~  ~%ng-input-suffix-icon%~ ~%ng-input-prefix-icon%~ ~%ng-input-prefix%~ ~%ng-input-suffix%~
    </mat-form-field>`;
    return template;
  }
  set template(templateString) { }
};
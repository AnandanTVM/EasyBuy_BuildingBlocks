"use strict";
let Attribute = require("../../../core/Attributes");
let AdvancedComponent = require("../../../core/AdvancedComponent");

module.exports = class TableColumn extends AdvancedComponent {
  constructor() {
    const name = "ng-table-column";
    const designerTemplate = `<ng-table-column slot="column" block-copy><span class="component-placeholder">Column</span></ng-table-column>`;
    const paletteTemplate = 'Column';
    const componentLabel = 'Column';

    super({
      name,
      template: '',
      designerTemplate,
      componentLabel,
      paletteTemplate,
      isAdvancedChild: true,
      templateUrl: "articles/#!components-guide-7/tables",
      addDefaultAttr: false
    });
    this.template = `
    <ng-container matColumnDef="%columnName%"  %bCustomProps%>
        <th mat-header-cell *matHeaderCellDef %matSortHeaderColumn% %headerclass%>%Header Label%</th>
        <td mat-cell *matCellDef="let table; let i = index;" %columnclass% >%Mapping%</td>
    </ng-container>
    `;
    super.addAttribute(new Attribute({
      key: 'Header Label',
      value: '',
      type: 'a'
    }));
    super.addAttribute(new Attribute({
      key: 'matSortHeaderColumn',
      value: '',
      type: 'a',
      attrDef: 'p'
    }));
    super.addAttribute(new Attribute({
      key: 'Mapping',
      value: '',
      type: 'ma',
      useAsLabel: true
    }));
    super.addAttribute(new Attribute({
      key: 'columnName',
      value: '',
      type: 'dav',
      templateUpdater: {
        postSave: function (elementValue, parentDesignerReference, attribs) {
        let columnName;
          if (attribs instanceof Array) {
            let v = attribs.find(function (element) {
              return element._key === 'Mapping';
            })._value;
            if (typeof v === 'string' && v.search(/table./i) > 0) {
              columnName = v.replace(new RegExp('.*{{\\s*table.'), '').replace(new RegExp('\\s*}}.*'), '');
            }
            else if (typeof v === 'string' && v.search(/table./i) < 0)
            {
              columnName = 'index'
            }
          }
          return columnName;
        }
      },
      visible: false
    }));
    super.addAttribute(this._classAttr('headerclass'));
    super.addAttribute(this._classAttr('columnclass'));
    super.composeTemplate({
      styles: `:host {
        padding: 1.5em;
        background: white;
        position: relative;
        flex: 1 0 auto;
        min-width: 8em;
        min-height: 4em;
        border: 1px solid lightgrey;
        margin: 0 !important;
        border-radius: 0px !important;
        color: black;
        }`
    })
  }
  toParent(parentInstance) { 
    if (!(parentInstance.shared.displayColumns instanceof Array)) {
      parentInstance.shared.displayColumns = [];
    }
    for (let i = 0; i < this.htmlAttributes.length; i++) {
      if (this.htmlAttributes[i]._key === 'Mapping' && typeof this.htmlAttributes[i]._value === 'string' ) {
        if (this.htmlAttributes[i]._value.search(/table./i) > 0){
          parentInstance.shared.displayColumns.push(this.htmlAttributes[i]._value.replace(new RegExp('.*{{\\s*table.'), '').replace(new RegExp('\\s*}}.*'), ''))
        }
        else if (this.htmlAttributes[i]._value.search(/table./i) < 0){
          parentInstance.shared.displayColumns.push('index')
        }
      }
      if (this.htmlAttributes[i]._key === 'matSortHeaderColumn' && this.htmlAttributes[i]._value) {
        parentInstance.shared.matSort = "matSort";
      }
    }
    return parentInstance;
  }

    /**
   * @param {string} key
   * @param {any[]} classArray
   */
  _classConcatenator(key, classArray) {
    if (classArray) {
      if (Array.isArray(classArray) && classArray.length) {
        return `${key}="${classArray.filter(v => typeof v === 'string').join(' ')}"`;
      }
    }
    return '';
    }

  /**
 * @param {string} key
 */
  _classAttr(key) {
    return new Attribute({
      key: key,
      value: "",
      type: 'dav',
      templateUpdater: {
        postSave: (arr) => {
          return this._classConcatenator('class', arr);
        }
      }
    })
  }
};

"use strict";
let AdvancedComponent = require("../../../core/AdvancedComponent");
let Attribute = require("../../../core/Attributes");


module.exports = class Table extends AdvancedComponent {
  constructor() {
    const name = "ng-table";
    const designerTemplate = `
    <ng-table component-label="Table" onclick="click(event)" class="ad-element flex-shrink-0 flex-grow-1">
      <div  slot="add" class="ad-card-buttons flex-row">
        <button id="add" class="add-child-button flex-column flex-justify-center" title="Add column" no-select>Column</button>
        <button id="add-drop" class="add-child-button flex-column flex-justify-center" title="Add droppable column" no-select>Drop Column</button>
        <button id="add-paginator" class="add-child-button flex-column flex-justify-center" title="Add a paginator" no-select>Paginator</button>
        <button id="add-filter" class="add-child-button flex-column flex-justify-center" title="Add a filter" no-select>Filter</button>
      </div>
      <ng-table-column n-adv-child></ng-table-column>
    </ng-table>`;
    const paletteTemplate = "Table";
    const componentLabel = 'Table';

    const templateUrl = "articles/#!components-guide-7/tables";
    super({
      name,
      template: ``,
      designerTemplate,
      componentLabel,
      paletteTemplate,
      templateUrl
    });
    super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.FORM_CONTROLS.val);
    super.addAttribute(new Attribute({
      key: '[dataSource]',
      value: '',
      type: 'kv'
  }));
    super.addAttribute(new Attribute({
      key: 'rowclick',
      value: '',
      type: 'a'
  }));
    super.composeTemplate({
      styles: `
      :host {
        background: #fff;
        border-radius: 2px;
        display: flex;
        position: relative;
        box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
        border: 1px solid lightgray;
        flex-direction: column;
        align-self: start;
        min-width: 24em;
        padding: 1.5em 1.5em 0 1.5em;
      }

      #addSlot::slotted(.add-child-button) {
        font-family: "Roboto medium", sans-serif;
        font-size: 14px;
        display: inline-block;
        height: 36px;
        min-width: 88px;
        padding: 6px 16px;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        border: 0;
        border-radius: 2px;
        outline: 0;
        font-size: 0.7em;
        margin: 0.3em !important;
     }

     #button-list {
      padding: 0.3em 0em;
     }
     #columns_parent {
       display: flex;
       flex-direction: row;
     }
     `,
      slotsTemplate: `
      <div id="columns_parent">
        <slot name="table-filter" id="columns_slot"></slot>
      </div>
      <div id="columns_parent">
        <slot name="column" id="columns_slot"></slot>
      </div>
      <div id="columns_parent">
        <slot name="paginator" id="columns_slot"></slot>
     </div>
     <div id="columns_parent">
        <slot id="addSlot" name="add"></slot>
     </div>
      `,
      onInit: function () {},
      onDestroy: function () {},
      customMethods: {
        click: function (e) {
          if (e.target.id === "add") {
            this.addChild("ng-table-column");
          } else if (e.target.id === "add-drop") {
            this.addChild("ng-droppable-table-column");
          } else if (e.target.id === "add-paginator" && !this.querySelector('ng-table-paginator')) {
            this.attachSiblingAfter('ng-table-paginator');
          } else if (e.target.id === "add-filter" && !this.querySelector('ng-table-filter')) {
            this.attachSiblingBefore('ng-table-filter');
          }
        }
      }
    });
  }
  get template() {
  const attr = this.getHtmlAttributes(this.htmlAttributes);
  let rowclickvalue;
  if (attr.rowclick._key == 'rowclick' && attr.rowclick._value != '')
  {
    rowclickvalue = attr.rowclick._value;
  }
    let displayColumns = this.shared && this.shared.displayColumns ? this.shared.displayColumns : "";
    displayColumns = JSON.stringify(displayColumns).replace(new RegExp("\"", 'g'), "'");
    return `
    <div fxLayout="column" %class% %style%>
      <table mat-table %[dataSource]% %bCustomProps% ${this.shared.matSort ? this.shared.matSort : ""} class="table-width-fix">
        ~%ng-table-header%~
        <tr mat-row ${rowclickvalue?'(click)=' + rowclickvalue:''} *matRowDef="let row; columns: ${displayColumns};"></tr>
      </table>
    </div>
    `;
  }

  set template(t) {}
};

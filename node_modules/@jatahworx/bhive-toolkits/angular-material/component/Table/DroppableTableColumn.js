"use strict";
let Attribute = require("../../../core/Attributes");
let AdvancedComponent = require("../../../core/AdvancedComponent");
let BGuid = require('../../../util/BGuid');

module.exports = class TableColumn extends AdvancedComponent {
  constructor() {
    const name = "ng-droppable-table-column";
    const designerTemplate = `<ng-droppable-table-column slot="column" class="drop-child drop" component-label="Column" block-copy></ng-droppable-table-column>`;
    const paletteTemplate = 'Droppable Column';
    const componentLabel = 'Droppable Column';

    super({
      name,
      designerTemplate,
      paletteTemplate,
      componentLabel,
      isAdvancedChild: true,
      templateUrl: "articles/#!components-guide-7/tables",
      addDefaultAttr: false
    });
    super.addAttribute(new Attribute({
      key: 'Sort Key',
      value: '',
      type: 'dav',
      templateUpdater: {
        postSave: (elementValue, parentDesignerReference, attribs) => {
          if (elementValue) return elementValue;
          if (attribs instanceof Array) {
            for (let i = 0; i < attribs.length; i++) {
              if (attribs[i]._key === 'columnId') {
                return attribs[i]._value;
              }
            }
          }
          return '';
        }
      }
    }));
    super.addAttribute(new Attribute({
      key: 'matSortHeaderColumn',
      value: '',
      type: 'a',
      attrDef: 'p'
    }));
    super.addAttribute(new Attribute({
      key: 'columnId',
      value: '',
      type: 'dav',
      templateUpdater: {
        preRender: () => {
          return new BGuid().generate();
        }
      },
      visible: '',
      isVisibleForParent: ''
    }));
    super.addAttribute(new Attribute({
      key: 'Header Label',
      value: '',
      type: 'a'
    }));
    super.addAttribute(this._classAttr('headerclass'));
    super.addAttribute(this._classAttr('columnclass'));
    super.composeTemplate({
      styles: `:host {
        padding: 1.5em;
        background: #E9E9E9;
        position: relative;
        flex: 1 0 auto;
        min-width: 8em;
        min-height: 4em;
        border: 1px solid black;
        margin: 0 !important;
        border-radius: 0px !important;
        }`
    })
  }

  updateClassAttribute(elementValue, parentDesignerReference, attribs) {
    let cellclassvalue;
    if (typeof elementValue === 'string' && elementValue != '') {
      cellclassvalue = 'class=' + elementValue;
    }
    return cellclassvalue;
  }

  toParent(parentInstance) {
    if (!(parentInstance.shared.displayColumns instanceof Array)) {
      parentInstance.shared.displayColumns = [];
    }
    for (let i = 0; i < this.htmlAttributes.length; i++) {
      if (this.htmlAttributes[i]._key === 'matSortHeaderColumn' && this.htmlAttributes[i]._value) {
        parentInstance.shared.matSort = "matSort";
      }
      if (this.htmlAttributes[i]._key === 'columnId' && this.htmlAttributes[i]._value) {
        parentInstance.shared.displayColumns.push(this.htmlAttributes[i]._value);
      }
    }
    console.log(this.htmlAttributes);
    return parentInstance;
  }

  get template() {
    return `
    <ng-container matColumnDef="%Sort Key%">
      <th mat-header-cell *matHeaderCellDef %matSortHeaderColumn% %headerclass%>%Header Label%</th>
      <td mat-cell *matCellDef="let table; let i = index;" %bCustomProps% %columnclass%></td>
    </ng-container>
    `;
  }
  set template(templateString) { }

  /**
   * @param {string} key
   * @param {any[]} classArray
   */
  _classConcatenator(key, classArray) {
    if (classArray) {
      if (Array.isArray(classArray) && classArray.length) {
        return `${key}="${classArray.filter(v => typeof v === 'string').join(' ')}"`;
      }
    }
    return '';
    }

  /**
 * @param {string} key
 */
  _classAttr(key) {
    return new Attribute({
      key: key,
      value: "",
      type: 'dav',
      templateUpdater: {
        postSave: (arr) => {
          return this._classConcatenator('class', arr);
        }
      }
    })
  }
};

'use strict';
let Attribute = require('../../core/Attributes');
let Component = require('../../core/Component');

module.exports = class Slider extends Component {
  constructor() {
    const name = 'NG-slider';
    const designerTemplate = `<div class="progress-bar-wrapper" component-label="Slider">
    <div class="label-padding"></div>
    <div class="slider-icon-content">
      <div class="slider-icon-border"></div>
    </div>
  </div>`;
    const paletteTemplate = 'Slider';
    const componentLabel = 'Slider';
    const templateUrl =
      'articles/#!components-guide-7/slider';

    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      templateUrl: templateUrl
    }
    );
    super.setType(Component.COMPONENT_TYPE_TITLES.FORM_CONTROLS.val);

    super.addAttribute(
      new Attribute({
        key: '[(ngModel)]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'color',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: 'invert',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: 'max',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: 'min',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: 'step',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: 'thumbLabel',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[vertical]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'disabled',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'value',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '(change)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(input)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'tickInterval',
        value: '',
        type: 'kv'
      })
    );
  }
  get template() {
    const template = `<mat-slider %color% %invert% %max% %min% %value% %disabled% %step% %[(ngModel)]% %thumbLabel% %bCustomProps% %(change)% %(input)% %style% %class% %[vertical]% %tickInterval%> </mat-slider>`;
    return template;
  }
  set template(templateString) { }
};
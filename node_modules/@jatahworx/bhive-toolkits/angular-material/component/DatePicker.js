'use strict';
let Attribute = require('../../core/Attributes');
let AdvancedComponent = require('../../core/AdvancedComponent');

module.exports = class DatePicker extends AdvancedComponent {
  constructor() {
    const name = 'NG-DatePicker';
    const designerTemplate = `
            <ng-datepicker class="non-dropable-comp-border form-control-comp">
              <div fxLayoutAlign="center center" class="ad-select-field form-control-button">
              <span class="component-placeholder ad-select-text">Select</span>
              <div class="datepicker-icon"></div>
              </div>
            </ng-datepicker>`;
    const paletteTemplate = 'Date Picker';
    const componentLabel = 'Date Picker';
    const templateUrl =
      'articles/#!components-guide-7/date-picker';

    super({
      name: name,
      designerTemplate: designerTemplate,
      paletteTemplate: paletteTemplate,
      componentLabel: componentLabel,
      templateUrl: templateUrl
    });
    super.setType(AdvancedComponent.COMPONENT_TYPE_TITLES.FORM_CONTROLS.val);
    super.composeTemplate({
      styles: `
            :host {
                background: #fff;
                border-radius: 2px;
                display: flex;
                position: relative;
                width: 216px;
                border: 1px solid white;
                margin: 1em 0.5em;
                align-self: start;
              }
            ::slotted(.ad-date-picker i) {
                position: relative;
                left: 177px;
            }
            ::slotted(.ad-date-picker span) {
                width:90%;
            }
            `,
	});
	
	super.addAttribute(
      new Attribute({
        key: 'placeholder',
        value: 'Date Picker',
        type: 'kv',
        useAsLabel: true
      }));
    super.addAttribute(new Attribute({
      key: '[appearance]',
      value: "'legacy'",
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: 'color',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: '[dateClass]',
      value: "",
      type: 'kv'
    }));
    super.addAttribute(this._classAttr('panelClass'));
    super.addAttribute(new Attribute({
      key: 'value',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: '[min]',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(new Attribute({
      key: '[max]',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '[startAt]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[calendarHeaderComponent]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'startView',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'touchUi',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'id',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '(dateChange)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(dateInput)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[opened]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[disabledDatepicker]',
        value: 'false',
        type: 'a'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[disabledDatepickerIcons]',
        value: 'false',
        type: 'a'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[disabledDatepickerInput]',
        value: 'false',
        type: 'a'
      })
    );
    super.addAttribute(new Attribute({
      key: '(opened)',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: '(closed)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[matDatepickerFilter]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'formControlName',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[formControl]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[(ngModel)]',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(new Attribute({
      key: 'name',
      value: '',
      type: 'kv'
    }));
    super.addAttribute(
      new Attribute({
        key: 'picker',
        value: 'picker',
        type: 'ma'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'ngModel',
        value: '',
        type: 'vk'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[required]',
        value: 'false',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(yearSelected)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(monthSelected)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'customIcon',
        value: '',
        type: 'a'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '[iconPosition]',
        value: 'matSuffix',
        type: 'a'
      })
    );
    super.addAttribute(
      new Attribute({
        key: '(click)',
        value: '',
        type: 'kv'
      })
    );
    super.addAttribute(
      new Attribute({
        key: 'readonly',
        value: '',
        type: 'kv'
      })
    );
  }
  get template() {
    let componentAttributes = this.getHtmlAttributes(this.htmlAttributes);
    let customIcon = componentAttributes.customIcon['_value'];
    let iconPosition = componentAttributes['[iconPosition]']['_value'];
    let template = '';
    if(customIcon.trim()!=""){
      template = `
    <mat-form-field %style% %class% %[appearance]% %(click)%>
      <input matInput %placeholder% [matDatepicker]="%picker%" %formControlName% %[formControl]% %(dateChange)% %(dateInput)% %value% %[(ngModel)]% %name% %[min]% %[max]% %[matDatepickerFilter]% %ngModel% %[required]% [disabled]=\"%[disabledDatepickerInput]%\" %readonly%>
      <mat-datepicker-toggle ${iconPosition} [for]="%picker%" disabled=\"%[disabledDatepickerIcons]%\">
      <mat-icon matDatepickerToggleIcon>${customIcon}</mat-icon>
      </mat-datepicker-toggle>
      <mat-datepicker #%picker% %(yearSelected)% %[calendarHeaderComponent]% %[dateClass]% %color% %(monthSelected)% %bCustomProps% %id% %panelClass% [disabled]=\"%[disabledDatepicker]%\" %[opened]% %[startAt]% %startView% %touchUi% %(opened)% %(closed)%></mat-datepicker>
      ~%ng-mat-error%~ ~%ng-input-hint%~
    </mat-form-field>`;
    } else {
      template = `
    <mat-form-field %style% %class% %[appearance]% %(click)%>
      <input matInput %placeholder% [matDatepicker]="%picker%" %formControlName% %[formControl]% %(dateChange)% %(dateInput)% %value% %[(ngModel)]% %name% %[min]% %[max]% %[matDatepickerFilter]% %ngModel% %[required]% [disabled]=\"%[disabledDatepickerInput]%\" %readonly%>
      <mat-datepicker-toggle ${iconPosition} [for]="%picker%" disabled=\"%[disabledDatepickerIcons]%\"></mat-datepicker-toggle>
      <mat-datepicker #%picker% %(yearSelected)% %[calendarHeaderComponent]% %[dateClass]% %color% %(monthSelected)% %bCustomProps% %id% %panelClass% [disabled]=\"%[disabledDatepicker]%\" %[opened]% %[startAt]% %startView% %touchUi% %(opened)% %(closed)%></mat-datepicker>
      ~%ng-mat-error%~ ~%ng-input-hint%~
    </mat-form-field>`;
    }
    return template;
  }
  set template(templateString) {}

  /**
    * @param {string} key
    * @param {any[]} classArray
    */
  _classConcatenator(key, classArray) {
  	if (classArray) {
  		if (Array.isArray(classArray) && classArray.length) {
  			return `${key}="${classArray.filter(v => typeof v === 'string').join(' ')}"`;
  		}
  	}
  	return '';
  }

  /**
    * @param {string} key
    */
  _classAttr(key) {
	return new Attribute({
		key: key,
		value: "",
		type: 'dav',
		templateUpdater: {
			postSave: (arr) => {
				return this._classConcatenator(key, arr);
			} 
		}
	  })
  }
};